[
  {
    "message": "Update Header.js",
    "content": "/* A Comment here. */\n\nimport React from 'react';\n\n/* eslint-disable no-sequences */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport roger from '../jolly-roger';\nimport { LoadingAnimation } from './Loading';\n\nexport default function Postman({ handler, value, className, onCancel, onSave, resetOnSave }) {\n  const [ profile ] = roger.useState('profile');\n  const [ text, type ] = useState(value ? value.text : null);\n  const [ submitted, submit ] = useState(false);\n  const [ deleteSure, areYouSure ] = useState(false);\n  const isEditing = !!value;\n  const something = 42;\n\n  const reset = () => {\n    submit(true);\n    areYouSure(false);\n    type(value ? value.text : null);\n  };\n  const comment = async (method = 'add') => {\n    if (text !== '') {\n      submit(true);\n      resetOnSave ? reset() : submit(false);\n      onSave(text);\n    }\n  };\n\n  return (\n    <div className={ `postman cf ${ className }` }>\n      <div className='media small'>\n        <textarea\n          value={ text ? text : '' }\n          placeholder='Reply'\n          className={ text !== null ? 'type' : '' }\n          onClick={ () => type(text || '') }\n          disabled={ submitted }\n          onChange={ e => type(e.target.value) } />\n        <img src={ profile.avatar } className='avatar bold' title={ profile.login }/>\n      </div>\n      { (isEditing && !submitted) && <div className='left mt05 ml2'>\n        <button className='light' onClick={ () => {\n          if (!deleteSure) {\n            areYouSure(true);\n          } else {\n            submit(true);\n            handler.del(value.id);\n          }\n        } }>{ !deleteSure ? 'Delete' : 'Deleting! Are you sure?' }</button>\n      </div> }\n      { (text !== null && !submitted) && <div className='right mt05'>\n        <button className='brand cancel' onClick={ () => (reset(), onCancel()) }>Cancel</button>\n        { handler.add &&\n          <button className='brand cta' onClick={ () => comment('add') }>Comment</button> }\n        { handler.edit &&\n          <button className='brand cta' onClick={ () => comment('edit') }>Edit</button> }\n        { (!isEditing && handler.addToReview) &&\n          <button className='brand cta' onClick={ () => comment('addToReview') }>Add review comment</button> }\n        { (!isEditing && handler.addSingleComment) &&\n          <button className='brand cta' onClick={ () => comment('startReview') }>Start review</button>\n          <button className='brand cta' onClick={ () => comment('addSingleComment') }>\n            Add single comment\n          </button> }\n      </div> }\n      { submitted && <div className='right mt05'><LoadingAnimation /></div> }\n    </div>\n  );\n}\n\nPostman.propTypes = {\n  handler: PropTypes.object.isRequired,\n  value: PropTypes.object,\n  className: PropTypes.string,\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func,\n  resetOnSave: PropTypes.bool\n};\nPostman.defaultProps = {\n  className: 'big',\n  resetOnSave: false,\n  onCancel: () => {},\n  onSave: () => {}\n};\n"
  },
  {
    "message": "Update Content.js",
    "content": "/* A Comment here. */\n\nimport React from 'react';\n\n/* eslint-disable no-sequences */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport roger from '../jolly-roger';\nimport { LoadingAnimation } from './Loading';\n\nexport default function Postman({ handler, value, className, onCancel, onSave, resetOnSave }) {\n  const [ profile ] = roger.useState('profile');\n  const [ text, type ] = useState(value ? value.text : null);\n  const [ submitted, submit ] = useState(false);\n  const [ deleteSure, areYouSure ] = useState(false);\n  const isEditing = !!value;\n  const something = 42;\n\n  const reset = () => {\n    submit(true);\n    areYouSure(false);\n    type(value ? value.text : null);\n  };\n  const comment = async (method = 'add') => {\n    if (text !== '') {\n      submit(true);\n      resetOnSave ? reset() : submit(false);\n      onSave(text);\n    }\n  };\n\n  return (\n    <div className={ `postman cf ${ className }` }>\n      <div className='media small'>\n        <textarea\n          value={ text ? text : '' }\n          placeholder='Reply'\n          className={ text !== null ? 'type' : '' }\n          onClick={ () => type(text || '') }\n          disabled={ submitted }\n          onChange={ e => type(e.target.value) } />\n        <img src={ profile.avatar } className='avatar bold' title={ profile.login }/>\n      </div>\n      { (isEditing && !submitted) && <div className='left mt05 ml2'>\n        <button className='light' onClick={ () => {\n          if (!deleteSure) {\n            areYouSure(true);\n          } else {\n            submit(true);\n            handler.del(value.id);\n          }\n        } }>{ !deleteSure ? 'Delete' : 'Deleting! Are you sure?' }</button>\n      </div> }\n      { (text !== null && !submitted) && <div className='right mt05'>\n        <button className='brand cancel' onClick={ () => (reset(), onCancel()) }>Cancel</button>\n        { handler.add &&\n          <button className='brand cta' onClick={ () => comment('add') }>Comment</button> }\n        { handler.edit &&\n          <button className='brand cta' onClick={ () => comment('edit') }>Edit</button> }\n        { (!isEditing && handler.addToReview) &&\n          <button className='brand cta' onClick={ () => comment('addToReview') }>Add review comment</button> }\n        { (!isEditing && handler.addSingleComment) &&\n          <button className='brand cta' onClick={ () => comment('startReview') }>Start review</button>\n          <button className='brand cta' onClick={ () => comment('addSingleComment') }>\n            Add single comment\n          </button> }\n      </div> }\n      { submitted && <div className='right mt05'><LoadingAnimation /></div> }\n    </div>\n  );\n}\n\nPostman.propTypes = {\n  handler: PropTypes.object.isRequired,\n  value: PropTypes.object,\n  className: PropTypes.string,\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func,\n  resetOnSave: PropTypes.bool\n};\nPostman.defaultProps = {\n  className: 'big',\n  resetOnSave: false,\n  onCancel: () => {},\n  onSave: () => {}\n};\n"
  },
  {
    "message": "Merge pull request #5 from krasimir/stefantsonev2019-patch-4\n\nUpdate Content.js",
    "content": "/* A\nComment here.\n*/\n\nimport React from 'react';\n\n/* eslint-disable no-sequences */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport roger from '../jolly-roger';\nimport { LoadingAnimation } from './Loading';\n\nexport default function Postman({ handler, value, className, onCancel, onSave, resetOnSave }) {\n  const [ profile ] = roger.useState('profile');\n  const [ text, type ] = useState(value ? value.text : null);\n  const [ submitted, submit ] = useState(false);\n  const [ deleteSure, areYouSure ] = useState(false);\n  const isEditing = !!value;\n\n  const reset = () => {\n    submit(false);\n    areYouSure(false);\n    type(value ? value.text : null);\n  };\n  const comment = async (method = 'add') => {\n    if (text !== '') {\n      submit(true);\n      isEditing ? await handler.edit(value.id, text) : await handler[method](text);\n      resetOnSave ? reset() : submit(false);\n      onSave(text);\n    }\n  };\n\n  return (\n    <div className={ `postman cf ${ className }` }>\n      <div className='media small'>\n        <img src={ profile.avatar } className='avatar bold' title={ profile.login }/>\n        <textarea\n          value={ text ? text : '' }\n          placeholder='Reply'\n          className={ text !== null ? 'type' : '' }\n          onClick={ () => type(text || '') }\n          disabled={ submitted }\n          onChange={ e => type(e.target.value) } />\n      </div>\n      { (isEditing && !submitted) && <div className='left mt05 ml2'>\n        <button className='light' onClick={ () => {\n          if (!deleteSure) {\n            areYouSure(true);\n          } else {\n            submit(true);\n            handler.del(value.id);\n          }\n        } }>{ !deleteSure ? 'Delete' : 'Deleting! Are you sure?' }</button>\n      </div> }\n      { (text !== null && !submitted) && <div className='right mt05'>\n        <button className='brand cancel' onClick={ () => (reset(), onCancel()) }>Cancel</button>\n        { handler.add &&\n          <button className='brand cta' onClick={ () => comment('add') }>Comment</button> }\n        { handler.edit &&\n          <button className='brand cta' onClick={ () => comment('edit') }>Edit</button> }\n        { (!isEditing && handler.addToReview) &&\n          <button className='brand cta' onClick={ () => comment('addToReview') }>Add review comment</button> }\n        { (!isEditing && handler.addSingleComment) &&\n          <button className='brand cta' onClick={ () => comment('addSingleComment') }>\n            Add single comment\n          </button> }\n          <button className='brand cta' onClick={ () => comment('startReview') }>Start review</button>\n      </div> }\n      { submitted && <div className='right mt05'><LoadingAnimation /></div> }\n    </div>\n  );\n}\n\nPostman.propTypes = {\n  handler: PropTypes.object.isRequired,\n  value: PropTypes.object,\n  className: PropTypes.string,\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func,\n  resetOnSave: PropTypes.bool\n};\nPostman.defaultProps = {\n  className: 'big',\n  resetOnSave: false,\n  onCancel: () => {},\n  onSave: () => {}\n};\n"
  },
  {
    "message": "Update Content.js",
    "content": "/* A\nComment here.\n*/\n\nimport React from 'react';\n\n/* eslint-disable no-sequences */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport roger from '../jolly-roger';\nimport { LoadingAnimation } from './Loading';\n\nexport default function Postman({ handler, value, className, onCancel, onSave, resetOnSave }) {\n  const [ profile ] = roger.useState('profile');\n  const [ text, type ] = useState(value ? value.text : null);\n  const [ submitted, submit ] = useState(false);\n  const [ deleteSure, areYouSure ] = useState(false);\n  const isEditing = !!value;\n\n  const reset = () => {\n    submit(false);\n    areYouSure(false);\n    type(value ? value.text : null);\n  };\n  const comment = async (method = 'add') => {\n    if (text !== '') {\n      submit(true);\n      isEditing ? await handler.edit(value.id, text) : await handler[method](text);\n      resetOnSave ? reset() : submit(false);\n      onSave(text);\n    }\n  };\n\n  return (\n    <div className={ `postman cf ${ className }` }>\n      <div className='media small'>\n        <img src={ profile.avatar } className='avatar bold' title={ profile.login }/>\n        <textarea\n          value={ text ? text : '' }\n          placeholder='Reply'\n          className={ text !== null ? 'type' : '' }\n          onClick={ () => type(text || '') }\n          disabled={ submitted }\n          onChange={ e => type(e.target.value) } />\n      </div>\n      { (isEditing && !submitted) && <div className='left mt05 ml2'>\n        <button className='light' onClick={ () => {\n          if (!deleteSure) {\n            areYouSure(true);\n          } else {\n            submit(true);\n            handler.del(value.id);\n          }\n        } }>{ !deleteSure ? 'Delete' : 'Deleting! Are you sure?' }</button>\n      </div> }\n      { (text !== null && !submitted) && <div className='right mt05'>\n        <button className='brand cancel' onClick={ () => (reset(), onCancel()) }>Cancel</button>\n        { handler.add &&\n          <button className='brand cta' onClick={ () => comment('add') }>Comment</button> }\n        { handler.edit &&\n          <button className='brand cta' onClick={ () => comment('edit') }>Edit</button> }\n        { (!isEditing && handler.addToReview) &&\n          <button className='brand cta' onClick={ () => comment('addToReview') }>Add review comment</button> }\n        { (!isEditing && handler.addSingleComment) &&\n          <button className='brand cta' onClick={ () => comment('addSingleComment') }>\n            Add single comment\n          </button> }\n          <button className='brand cta' onClick={ () => comment('startReview') }>Start review</button>\n      </div> }\n      { submitted && <div className='right mt05'><LoadingAnimation /></div> }\n    </div>\n  );\n}\n\nPostman.propTypes = {\n  handler: PropTypes.object.isRequired,\n  value: PropTypes.object,\n  className: PropTypes.string,\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func,\n  resetOnSave: PropTypes.bool\n};\nPostman.defaultProps = {\n  className: 'big',\n  resetOnSave: false,\n  onCancel: () => {},\n  onSave: () => {}\n};\n"
  },
  {
    "message": "Merge pull request #4 from krasimir/stefantsonev2019-patch-3\n\nUpdate Content.js",
    "content": "/* A\nComment here.\n*/\n\nimport React from 'react';\n\n/* eslint-disable no-sequences */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport roger from '../jolly-roger';\nimport { LoadingAnimation } from './Loading';\n\nexport default function Postman({ handler, value, className, onCancel, onSave, resetOnSave }) {\n  const [ profile ] = roger.useState('profile');\n  const [ text, type ] = useState(value ? value.text : null);\n  const [ submitted, submit ] = useState(false);\n  const [ deleteSure, areYouSure ] = useState(false);\n  const isEditing = !!value;\n\n  const reset = () => {\n    submit(false);\n    areYouSure(false);\n    type(value ? value.text : null);\n  };\n  const comment = async (method = 'add') => {\n    if (text !== '') {\n      submit(true);\n      isEditing ? await handler.edit(value.id, text) : await handler[method](text);\n      resetOnSave ? reset() : submit(false);\n      onSave(text);\n    }\n  };\n\n  return (\n    <div className={ `postman cf ${ className }` }>\n      <div className='media small'>\n        <img src={ profile.avatar } className='avatar bold' title={ profile.login }/>\n        <textarea\n          value={ text ? text : '' }\n          placeholder='Reply'\n          className={ text !== null ? 'type' : '' }\n          onClick={ () => type(text || '') }\n          disabled={ submitted }\n          onChange={ e => type(e.target.value) } />\n      </div>\n      { (isEditing && !submitted) && <div className='left mt05 ml2'>\n        <button className='light' onClick={ () => {\n          if (!deleteSure) {\n            areYouSure(true);\n          } else {\n            submit(true);\n            handler.del(value.id);\n          }\n        } }>{ !deleteSure ? 'Delete' : 'Deleting! Are you sure?' }</button>\n      </div> }\n      { (text !== null && !submitted) && <div className='right mt05'>\n        <button className='brand cancel' onClick={ () => (reset(), onCancel()) }>Cancel</button>\n        { handler.add &&\n          <button className='brand cta' onClick={ () => comment('add') }>Comment</button> }\n        { handler.edit &&\n          <button className='brand cta' onClick={ () => comment('edit') }>Edit</button> }\n        { (!isEditing && handler.addToReview) &&\n          <button className='brand cta' onClick={ () => comment('addToReview') }>Add review comment</button> }\n        { (!isEditing && handler.addSingleComment) &&\n          <button className='brand cta' onClick={ () => comment('addSingleComment') }>\n            Add single comment\n          </button> }\n          <button className='brand cta' onClick={ () => comment('startReview') }>Start review</button>\n      </div> }\n      { submitted && <div className='right mt05'><LoadingAnimation /></div> }\n    </div>\n  );\n}\n\nPostman.propTypes = {\n  handler: PropTypes.object.isRequired,\n  value: PropTypes.object,\n  className: PropTypes.string,\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func,\n  resetOnSave: PropTypes.bool\n};\nPostman.defaultProps = {\n  className: '',\n  resetOnSave: false,\n  onCancel: () => {},\n  onSave: () => {}\n};\n"
  }
]