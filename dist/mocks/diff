diff --git a/apps/calpamos/src/authentication/services/AuthzManagementClient.js b/apps/calpamos/src/authentication/services/AuthzManagementClient.js
index 6d28039be..62022b199 100644
--- a/apps/calpamos/src/authentication/services/AuthzManagementClient.js
+++ b/apps/calpamos/src/authentication/services/AuthzManagementClient.js
@@ -66,6 +66,24 @@ export default class AuthzManagementClient {
     throw new UnknownError(`Cannot get roles due to ${message}`);
   }
 
+  async addUserToGroups(userId, groupIds) {
+    const response = await fetch(`${this._authzExtensionURL}/users/${userId}/groups`, {
+      headers: {
+        'Authorization': `Bearer ${await this._getToken()}`,
+        'Content-type': 'application/json'
+      },
+      method: 'patch',
+      body: JSON.stringify(groupIds)
+    });
+
+    if (response.ok) {
+      return;
+    }
+    const { message } = await response.json();
+
+    throw new UnknownError(`Cannot assign user ${userId} to groups ${groupIds.join(', ')} due to: ${message}`);
+  }
+
   async addUserToRoles(userId, roleIds) {
     const response = await fetch(`${this._authzExtensionURL}/users/${userId}/roles`, {
       headers: {
@@ -149,22 +167,6 @@ export default class AuthzManagementClient {
     }
   }
 
-  async updateGroup({ groupId, name, description }) {
-    const response = await fetch(`${this._authzExtensionURL}/groups/${groupId}`, {
-      headers: {
-        Authorization: `Bearer ${await this._getToken()}`
-      },
-      method: 'put',
-      body: JSON.stringify({ name, description })
-    });
-
-    if (!response.ok) {
-      const { message } = await response.json();
-
-      throw new UnknownError(`Cannot update group ${groupId} due to ${message}`);
-    }
-  }
-
   async getAllGroups() {
     const response = await fetch(`${this._authzExtensionURL}/groups`, {
       headers: {
diff --git a/apps/calpamos/src/authentication/services/__mocks__/AuthzManagementClient.js b/apps/calpamos/src/authentication/services/__mocks__/AuthzManagementClient.js
index 6a531cc2d..e9cef80b4 100644
--- a/apps/calpamos/src/authentication/services/__mocks__/AuthzManagementClient.js
+++ b/apps/calpamos/src/authentication/services/__mocks__/AuthzManagementClient.js
@@ -1,6 +1,7 @@
 export const mockGetGroupIdByName = jest.fn();
 export const mockGetRoles = jest.fn();
 export const mockAddUserToRoles = jest.fn();
+export const mockAddUserToGroups = jest.fn();
 export const mockGetGroup = jest.fn();
 export const mockCreateGroup = jest.fn();
 export const mockUpdateGroup = jest.fn();
@@ -16,6 +17,7 @@ const mock = jest.fn().mockImplementation(() => {
     getGroupIdByName: mockGetGroupIdByName,
     getRoles: mockGetRoles,
     addUserToRoles: mockAddUserToRoles,
+    addUserToGroups: mockAddUserToGroups,
     getGroup: mockGetGroup,
     createGroup: mockCreateGroup,
     updateGroup: mockUpdateGroup,
diff --git a/apps/calpamos/src/manageSites/activities/__tests__/saveSite.spec.js b/apps/calpamos/src/manageSites/activities/__tests__/saveSite.spec.js
index f3189da95..52a18d3d5 100644
--- a/apps/calpamos/src/manageSites/activities/__tests__/saveSite.spec.js
+++ b/apps/calpamos/src/manageSites/activities/__tests__/saveSite.spec.js
@@ -64,7 +64,7 @@ describe('Given the saveSite activity', () => {
     expect(userService.existsByEmail).toHaveBeenCalledWith(newUser.email);
     expect(userService.create).toHaveBeenCalledWith(newUser);
     expect(siteService.create).toHaveBeenCalledWith(expect.objectContaining({ ...omit(newSite, 'contact') }));
-    expect(userService.linkToGroup).toHaveBeenCalledWith(user, site.groupId);
+    expect(userService.linkToGroups).toHaveBeenCalledWith(user, [ site.groupId ]);
     expect(savedSite).toEqual(site);
     expect(isNewUser).toEqual(true);
   });
@@ -188,7 +188,7 @@ describe('Given the saveSite activity', () => {
         expect(siteService.create).toHaveBeenCalledWith(expect.objectContaining(newSite));
         expect(savedSite).toEqual(expect.objectContaining(newSite));
         expect(savedSite.contact).toEqual(user);
-        expect(userService.linkToGroup).toHaveBeenCalledWith(user, savedSite.groupId);
+        expect(userService.linkToGroups).toHaveBeenCalledWith(user, [ savedSite.groupId ]);
       });
     });
 
@@ -255,7 +255,7 @@ describe('Given the saveSite activity', () => {
       beforeEach(() => {
         setupServices();
         userService.getById.mockResolvedValueOnce(user);
-        userService.linkToGroup.mockRejectedValueOnce(mockError);
+        userService.linkToGroups.mockRejectedValueOnce(mockError);
       });
 
       describe('and the site already existed', () => {
@@ -294,7 +294,7 @@ describe('Given the saveSite activity', () => {
         const mockRollbackError = { statusCode: 418, message: `I'm a teapot` };
 
         mockCompositeNewSiteForNewUser(site, user);
-        userService.linkToGroup.mockRejectedValueOnce(mockError);
+        userService.linkToGroups.mockRejectedValueOnce(mockError);
         userService.delete.mockRejectedValueOnce(mockRollbackError);
 
         await expect(saveSiteActivity(newSite)).rejects.toEqual(mockError);
diff --git a/apps/calpamos/src/manageSites/activities/saveSite.js b/apps/calpamos/src/manageSites/activities/saveSite.js
index d3c8c5fed..aa5ad5ae3 100644
--- a/apps/calpamos/src/manageSites/activities/saveSite.js
+++ b/apps/calpamos/src/manageSites/activities/saveSite.js
@@ -59,7 +59,7 @@ export default (siteService, userService, logger) => async (site) => {
     } = await ensureSiteUpdated(siteService)(siteToSave);
     rollbacks.push(siteRollback);
 
-    await userService.linkToGroup(savedUser, savedSite.groupId);
+    await userService.linkToGroups(savedUser, [ savedSite.groupId ]);
 
     return { site: savedSite, isNewUser: !!isNewUser };
   } catch (err) {
diff --git a/apps/calpamos/src/services/UserService/UserService.js b/apps/calpamos/src/services/UserService/UserService.js
index 624e0410f..544bff977 100644
--- a/apps/calpamos/src/services/UserService/UserService.js
+++ b/apps/calpamos/src/services/UserService/UserService.js
@@ -136,9 +136,9 @@ export default class UserService {
     return fromEndpointFormatToUserObject(updatedAuth0User);
   }
 
-  async linkToGroup(user, groupId) {
+  async linkToGroups(user, groupIds) {
     try {
-      await this._authzManagementClient.addGroupMembers(groupId, [ user.id ]);
+      await this._authzManagementClient.addUserToGroups(user.id, groupIds);
       return true;
     } catch (err) {
       throw err;
diff --git a/apps/calpamos/src/services/UserService/__tests__/UserService.spec.js b/apps/calpamos/src/services/UserService/__tests__/UserService.spec.js
index e45315f62..aaa21a5a1 100644
--- a/apps/calpamos/src/services/UserService/__tests__/UserService.spec.js
+++ b/apps/calpamos/src/services/UserService/__tests__/UserService.spec.js
@@ -276,35 +276,34 @@ describe('Given a instance of the UserService', () => {
     });
   });
 
-  describe('when linking a user to an Auth0 group', () => {
+  describe('when linking a user to Auth0 groups', () => {
     const groupId = 'csirkepaprikas';
 
-    it('should call Auth0 with the user id and target group id', async () => {
+    it('should call Auth0 with the user id and target group ids', async () => {
       const userService = new UserService(authnManagementClient, authzManagementClient, settings);
-      await userService.linkToGroup(mockUser, groupId);
+      await userService.linkToGroups(mockUser, [ groupId ]);
 
-      expect(authzManagementClient.addGroupMembers).toBeCalledWith(groupId, [ mockUser.id ]);
+      expect(authzManagementClient.addUserToGroups).toBeCalledWith(mockUser.id, [ groupId ]);
     });
 
     describe('and the user is successfully linked in Auth0', () => {
       it('should complete successfully', async () => {
-        authzManagementClient.addGroupMembers.mockResolvedValueOnce();
+        authzManagementClient.addUserToGroups.mockResolvedValueOnce();
 
         const userService = new UserService(authnManagementClient, authzManagementClient, settings);
-        await userService.linkToGroup(mockUser, groupId);
 
-        return expect(authnManagementClient.deleteUser).rejects.not.toThrowError;
+        return expect(userService.linkToGroups(mockUser, [ groupId ])).rejects.not.toThrowError;
       });
     });
 
     describe(`and linking the user fails in Auth0`, () => {
       it('should propagate the error', async () => {
         const error = { statusCode: 404, message: 'Group not found' };
-        authzManagementClient.addGroupMembers.mockRejectedValueOnce(error);
+        authzManagementClient.addUserToGroups.mockRejectedValueOnce(error);
 
         const userService = new UserService(authnManagementClient, authzManagementClient, settings);
 
-        await expect(userService.linkToGroup(mockUser, groupId)).rejects.toEqual(error);
+        await expect(userService.linkToGroups(mockUser, [ groupId ])).rejects.toEqual(error);
       });
     });
   });
diff --git a/apps/calpamos/src/services/UserService/__tests__/utils.spec.js b/apps/calpamos/src/services/UserService/__tests__/utils.spec.js
index ab35202c1..39526fd1c 100644
--- a/apps/calpamos/src/services/UserService/__tests__/utils.spec.js
+++ b/apps/calpamos/src/services/UserService/__tests__/utils.spec.js
@@ -1,6 +1,27 @@
-import { extractKnownUserGroupMappings } from '../utils';
+/* eslint-disable camelcase */
+import { fromEndpointFormatToUserObject, extractKnownUserGroupMappings } from '../utils';
 
 describe('Given the UserService utils', () => {
+  describe('when mapping endpoint user into user object without degrees or phone_number', () => {
+    it('should create a matching user with empty strings for both', () => {
+      const user = fromEndpointFormatToUserObject({
+        email: 'fred@gmail.com',
+        user_id: '123123123',
+        user_metadata: { first_name: 'fred', last_name: 'dibner' }
+      });
+
+      expect(user).toEqual({
+        email: 'fred@gmail.com',
+        id: '123123123',
+        firstName: 'fred',
+        lastName: 'dibner',
+        phone: { number: '' },
+        degrees: '',
+        roles: undefined
+      });
+    });
+  });
+
   describe('when extracting known user groups mappings', () => {
     it('should return a map of users with their associated groups, ignoring mappings for groups not provided', () => {
       const allGroups = [
diff --git a/apps/calpamos/src/services/UserService/utils.js b/apps/calpamos/src/services/UserService/utils.js
index fd4cbd881..3b2b9f269 100644
--- a/apps/calpamos/src/services/UserService/utils.js
+++ b/apps/calpamos/src/services/UserService/utils.js
@@ -1,25 +1,35 @@
 /* eslint-disable camelcase */
 import uuid from 'uuid';
 import get from 'lodash/get';
+import has from 'lodash/has';
 import keyBy from 'lodash/keyBy';
 import mergeWith from 'lodash/mergeWith';
+import { createEmptyUser } from '../../authentication/helpers';
 
 export const fromEndpointFormatToUserObject = ({
   email,
   user_metadata: userMetadata,
   app_metadata: appMetadata,
   user_id: id
-}) => ({
-  id,
-  email,
-  phone: {
-    number: get(userMetadata, 'phone_number')
-  },
-  firstName: get(userMetadata, 'first_name'),
-  lastName: get(userMetadata, 'last_name'),
-  degrees: get(userMetadata, 'title'),
-  roles: get(appMetadata, 'authorization.roles')
-});
+}) =>
+  Object.assign(
+    createEmptyUser(),
+    {
+      id,
+      email,
+      firstName: get(userMetadata, 'first_name'),
+      lastName: get(userMetadata, 'last_name'),
+      roles: get(appMetadata, 'authorization.roles')
+    },
+    has(userMetadata, 'title') && {
+      degrees: get(userMetadata, 'title')
+    },
+    has(userMetadata, 'phone_number') && {
+      phone: {
+        number: get(userMetadata, 'phone_number')
+      }
+    }
+  );
 
 export const fromUserObjectToUpdateEndpointRequest = ({
   firstName,
diff --git a/apps/calpamos/src/siteUsers/__tests__/redux.spec.js b/apps/calpamos/src/siteUsers/__tests__/redux.spec.js
new file mode 100644
index 000000000..44ef1b4be
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/__tests__/redux.spec.js
@@ -0,0 +1,58 @@
+import { combineReducers } from 'redux';
+
+import { mockUserWithId } from '../../authentication/__helpers__/mocks';
+import { getAllUsers } from '../selectors';
+import { setAllUsers, setUser } from '../actions';
+import { siteUsers as siteUsersReducer } from '../reducer';
+
+const rootReducer = combineReducers({ siteUsers: siteUsersReducer });
+
+describe('Given the siteUsers actions, reducers and selectors', () => {
+  describe('when getting all users', () => {
+    it('should return undefined', () => {
+      const state = rootReducer(undefined, { type: 'unrelated' });
+
+      expect(getAllUsers(state)).toBeUndefined();
+    });
+  });
+  describe('when setting all users and then getting all users', () => {
+    it('should return an array of the set users', () => {
+      const users = [ { user: mockUserWithId() }, { user: mockUserWithId() } ];
+
+      const state = rootReducer(undefined, setAllUsers(users));
+
+      expect(getAllUsers(state)).toEqual(users);
+    });
+  });
+  describe('when setting a single user and then getting all users', () => {
+    it('should return an array of the single', () => {
+      const user = mockUserWithId();
+
+      const state = rootReducer(undefined, setUser({ user }));
+
+      expect(getAllUsers(state)).toEqual([ { user } ]);
+    });
+  });
+  describe('when setting a user with the same id twice and then getting all users', () => {
+    it('should return an array of the single user with their updated information', () => {
+      const user = mockUserWithId();
+      const updated = mockUserWithId({ id: user.id });
+
+      const state = rootReducer(undefined, setUser({ user }));
+      const updatedState = rootReducer(state, setUser({ user: updated }));
+
+      expect(getAllUsers(updatedState)).toEqual([ { user: updated } ]);
+    });
+  });
+  describe('when setting a user twice with different ids and then getting all users', () => {
+    it('should return an array of both users', () => {
+      const userA = mockUserWithId();
+      const userB = mockUserWithId();
+
+      const state = rootReducer(undefined, setUser({ user: userA }));
+      const updatedState = rootReducer(state, setUser({ user: userB }));
+
+      expect(getAllUsers(updatedState)).toEqual([ { user: userA }, { user: userB } ]);
+    });
+  });
+});
diff --git a/apps/calpamos/src/siteUsers/actions.js b/apps/calpamos/src/siteUsers/actions.js
new file mode 100644
index 000000000..8f80f7d76
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/actions.js
@@ -0,0 +1,4 @@
+import { SET_ALL_USERS, SET_USER } from './constants';
+
+export const setAllUsers = (wrappedUsers) => ({ type: SET_ALL_USERS, wrappedUsers });
+export const setUser = (wrappedUser) => ({ type: SET_USER, wrappedUser });
diff --git a/apps/calpamos/src/siteUsers/components/GetUsers.jsx b/apps/calpamos/src/siteUsers/components/GetUsers.jsx
new file mode 100644
index 000000000..48236343f
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/components/GetUsers.jsx
@@ -0,0 +1,24 @@
+import { connect } from 'react-redux';
+import PropTypes from 'prop-types';
+import { getAllUsers } from '../selectors';
+
+function GetUsers({ children, users }) {
+  return children(users);
+}
+
+GetUsers.propTypes = {
+  children: PropTypes.func.isRequired,
+  users: PropTypes.array
+};
+
+const mapStateToProps = (state) => ({
+  users: getAllUsers(state)
+});
+
+const ConnectedGetUsers = connect(mapStateToProps)(GetUsers);
+
+ConnectedGetUsers.propTypes = {
+  children: PropTypes.func.isRequired
+};
+
+export default ConnectedGetUsers;
diff --git a/apps/calpamos/src/siteUsers/components/__tests__/GetUsers.spec.jsx b/apps/calpamos/src/siteUsers/components/__tests__/GetUsers.spec.jsx
new file mode 100644
index 000000000..d9b794da2
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/components/__tests__/GetUsers.spec.jsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import { combineReducers, createStore } from 'redux';
+import { Provider } from 'react-redux';
+import { mount } from 'enzyme';
+import { mockUserWithId } from '../../../authentication/__helpers__/mocks';
+import { setAllUsers } from '../../actions';
+
+import { siteUsers } from '../../reducer';
+import GetUsers from '../GetUsers.jsx';
+
+const mountGetUsers = () => {
+  const store = createStore(combineReducers({ siteUsers }));
+  const childrenFaCCSpy = jest.fn().mockImplementation(() => null);
+  mount(
+    <Provider store={ store }>
+      <GetUsers>{ childrenFaCCSpy }</GetUsers>
+    </Provider>
+  );
+
+  return { childrenFaCCSpy, store };
+};
+
+describe('Given the siteUsers GetUser component', () => {
+  describe('when we render the component before users have been set in the store', () => {
+    it(`should invoke the children function with undefined`, () => {
+      const { childrenFaCCSpy } = mountGetUsers();
+
+      expect(childrenFaCCSpy).toHaveBeenCalledWith(undefined);
+    });
+  });
+  describe('when rendering AND users have been set in the store', () => {
+    it(`should invoke the children function with the list of users`, () => {
+      const { childrenFaCCSpy, store } = mountGetUsers();
+      const users = [ { user: mockUserWithId() }, { user: mockUserWithId() } ];
+      childrenFaCCSpy.mockClear();
+
+      store.dispatch(setAllUsers(users));
+
+      expect(childrenFaCCSpy).toHaveBeenCalledWith(users);
+    });
+  });
+});
diff --git a/apps/calpamos/src/siteUsers/constants.js b/apps/calpamos/src/siteUsers/constants.js
new file mode 100644
index 000000000..17d47e787
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/constants.js
@@ -0,0 +1,4 @@
+const PREFIX = 'USERS';
+
+export const SET_ALL_USERS = `${PREFIX}/SET_ALL_USERS`;
+export const SET_USER = `${PREFIX}/SET_USER`;
diff --git a/apps/calpamos/src/siteUsers/index.js b/apps/calpamos/src/siteUsers/index.js
new file mode 100644
index 000000000..181d92018
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/index.js
@@ -0,0 +1,5 @@
+export { siteUsers as reducer } from './reducer';
+export * from './selectors';
+export * from './actions';
+
+export { default as GetUsers } from './components/GetUsers.jsx';
diff --git a/apps/calpamos/src/siteUsers/reducer.js b/apps/calpamos/src/siteUsers/reducer.js
new file mode 100644
index 000000000..f38c4bcfe
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/reducer.js
@@ -0,0 +1,26 @@
+import { SET_ALL_USERS, SET_USER } from './constants';
+
+const initialState = {
+  entries: undefined
+};
+
+const setUser = (entries, wrappedUser) => {
+  entries[ wrappedUser.user.id ] = wrappedUser;
+  return entries;
+};
+
+export function siteUsers(state = initialState, action) {
+  switch (action.type) {
+    case SET_ALL_USERS:
+      return {
+        ...state,
+        entries: action.wrappedUsers.reduce(setUser, {})
+      };
+    case SET_USER:
+      return {
+        ...state,
+        entries: setUser({ ...state.entries }, action.wrappedUser)
+      };
+  }
+  return state;
+}
diff --git a/apps/calpamos/src/siteUsers/selectors.js b/apps/calpamos/src/siteUsers/selectors.js
new file mode 100644
index 000000000..5897c0dd5
--- /dev/null
+++ b/apps/calpamos/src/siteUsers/selectors.js
@@ -0,0 +1,8 @@
+import { createSelector } from 'reselect';
+
+const getUsers = (state) => state.siteUsers;
+
+export const getAllUsers = createSelector(
+  getUsers,
+  ({ entries }) => entries && Object.values(entries)
+);
diff --git a/apps/calpamos/src/validators/validators.js b/apps/calpamos/src/validators/validators.js
index 5f8da7aee..67370ef33 100644
--- a/apps/calpamos/src/validators/validators.js
+++ b/apps/calpamos/src/validators/validators.js
@@ -51,6 +51,8 @@ export const dobCorrectFormat = (message, parse, { maxAge = MAX_USER_AGE } = {})
   return null;
 };
 
+export const minLength = (min, message) => (value) => (value.length < min ? message : null);
+
 export const maxLength = (max, message) => (value) => (value.length > max ? message : null);
 
 export const matchEmail = (message) => (value) => (!/^.+\@.+\..+$/.test(value) ? message : null);
diff --git a/apps/weyland/schemas/createUserRequest.json b/apps/weyland/schemas/createUserRequest.json
new file mode 100644
index 000000000..002b17bc4
--- /dev/null
+++ b/apps/weyland/schemas/createUserRequest.json
@@ -0,0 +1,17 @@
+{
+  "$schema": "http://json-schema.org/draft-04/schema#",
+  "id": "http://antidote.me/weyland/create-user-request",
+  "type": "object",
+  "required": ["user", "groups"],
+  "properties": {
+    "user": { "$ref": "/weyland/definitions#/user" },
+    "groups": {
+      "type": "array",
+      "minLength": 1,
+      "maxLength": 50,
+      "items": {
+        "$ref": "/calpamos/definitions#/uuid"
+      }
+    }
+  }
+}
diff --git a/apps/weyland/schemas/editUserRequest.json b/apps/weyland/schemas/editUserRequest.json
new file mode 100644
index 000000000..fd8901c45
--- /dev/null
+++ b/apps/weyland/schemas/editUserRequest.json
@@ -0,0 +1,9 @@
+{
+  "$schema": "http://json-schema.org/draft-04/schema#",
+  "id": "http://antidote.me/weyland/edit-user-request",
+  "type": "object",
+  "required": ["user"],
+  "properties": {
+    "user": { "$ref": "/weyland/definitions#/user" }
+  }
+}
diff --git a/apps/weyland/src/account/components/AccountPage.jsx b/apps/weyland/src/account/components/AccountPage.jsx
index df64c02ac..08f12118f 100644
--- a/apps/weyland/src/account/components/AccountPage.jsx
+++ b/apps/weyland/src/account/components/AccountPage.jsx
@@ -30,7 +30,7 @@ export default function AccountPage({ match }) {
             <Switch>
               <Route exact path={ match.url } render={ () => <AccountSettings /> } />
               <Route path={ `${match.url}/sites` } render={ () => <Sites /> } />
-              { __DEV__ && <Route exact path={ `${match.url}/users` } render={ () => <Users /> } /> }
+              { __DEV__ && <Route path={ `${match.url}/users` } render={ () => <Users /> } /> }
               <Redirect to={ match.url } />
             </Switch>
           </Card>
diff --git a/apps/weyland/src/account/components/FetchUsers.jsx b/apps/weyland/src/account/components/FetchUsers.jsx
deleted file mode 100644
index ec0af645f..000000000
--- a/apps/weyland/src/account/components/FetchUsers.jsx
+++ /dev/null
@@ -1,22 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-
-import { ViewContext } from 'calpamos/src/di';
-import Fetch from 'calpamos/src/ui/Fetch.jsx';
-
-export default function FetchUsers({ children, fallback }) {
-  return (
-    <ViewContext.Consumer dependencies={ [ 'userManagementService' ] }>
-      { ({ userManagementService }) => (
-        <Fetch action={ () => userManagementService.getUsersWithGroups() } fallback={ fallback }>
-          { children }
-        </Fetch>
-      ) }
-    </ViewContext.Consumer>
-  );
-}
-
-FetchUsers.propTypes = {
-  children: PropTypes.func,
-  fallback: PropTypes.node
-};
diff --git a/apps/weyland/src/account/components/Users.jsx b/apps/weyland/src/account/components/Users.jsx
index 25010846e..f1a9ebcd2 100644
--- a/apps/weyland/src/account/components/Users.jsx
+++ b/apps/weyland/src/account/components/Users.jsx
@@ -1,6 +1,7 @@
+import Notifier from 'calpamos/src/ui/Notifier.jsx';
 import React from 'react';
 import PropTypes from 'prop-types';
-import { withRouter } from 'react-router';
+import { Route, withRouter } from 'react-router-dom';
 import sortBy from 'lodash/fp/sortBy';
 
 import { getAllSites, GetSites } from 'calpamos/src/sites';
@@ -8,16 +9,29 @@ import { Link as LinkButton } from 'calpamos/src/ui/buttons';
 import { Col, Row } from 'calpamos/src/ui/grid';
 import PlusIcon from 'calpamos/src/ui/icons/Plus.jsx';
 import { formatFullName } from 'calpamos/src/utils/formatters';
-import { Heading, Text } from 'calpamos/src/ui/primitives';
+import { Heading, Link, Text } from 'calpamos/src/ui/primitives';
 import { Table, Tbody, Td, Th, Thead, Tr } from 'calpamos/src/ui/table';
 import LoadingLogo from 'calpamos/src/ui/LoadingLogo.jsx';
+import NotificationBar from 'calpamos/src/ui/NotificationBar.jsx';
 
 import { getUserRoleName, mapGroupIdsToSiteNames } from '../utils';
-import FetchUsers from './FetchUsers.jsx';
+import EditUserModal from '../../users/components/EditUserModal.jsx';
+import CreateUserModal from '../../users/components/CreateUserModal.jsx';
+import FetchUsers from '../../users/components/FetchUsers.jsx';
 
 const sortUserGroups = sortBy(({ user }) => `${user.firstName} ${user.lastName}`.toLowerCase());
 
-function Users({ match }) {
+function InconsistentDataWarning() {
+  return (
+    <NotificationBar compact mb={ 7 }>
+      Updates to user profiles might take a few minutes to propagate.
+    </NotificationBar>
+  );
+}
+
+function Users({ match, history }) {
+  const closeModal = () => history.replace(match.path);
+
   return (
     <React.Fragment>
       <Row mb={ 7 }>
@@ -25,7 +39,7 @@ function Users({ match }) {
           <Heading>Users</Heading>
         </Col>
         <Col width={ 1 / 2 } ta='right' my='auto'>
-          <LinkButton secondary small to={ match.url }>
+          <LinkButton secondary small to={ `${match.url}/add` }>
             <PlusIcon />
             <Text is='span' pl={ 2 }>
               Add a user
@@ -33,44 +47,84 @@ function Users({ match }) {
           </LinkButton>
         </Col>
       </Row>
-      <FetchUsers fallback={ <LoadingLogo display='block' mx='auto' /> }>
-        { (usersWithGroups) => (
-          <GetSites selector={ getAllSites }>
-            { (pending, sites) => {
-              const getSiteNames = mapGroupIdsToSiteNames(sites);
-              return (
-                <Row mb={ 7 }>
-                  <Col width={ 1 }>
-                    <Table collapsed>
-                      <Thead>
-                        <Tr>
-                          <Th ta='left'>Name</Th>
-                          <Th ta='left'>Sites</Th>
-                          <Th ta='left'>Role</Th>
-                        </Tr>
-                      </Thead>
-                      <Tbody>
-                        { sortUserGroups(usersWithGroups).map(({ user, groups }) => {
-                          const siteNames = getSiteNames(groups);
-                          return (
-                            <Tr key={ user.id }>
-                              <Td>
-                                <strong>{ formatFullName(user) }</strong>
-                              </Td>
-                              <Td>{ siteNames.length > 0 ? siteNames.join(', ') : 'None' }</Td>
-                              <Td>{ getUserRoleName(user.roles) }</Td>
-                            </Tr>
-                          );
-                        }) }
-                      </Tbody>
-                    </Table>
-                  </Col>
-                </Row>
-              );
-            } }
-          </GetSites>
+      <Notifier>
+        { ({ show: showNotification, notification }) => (
+          <FetchUsers fallback={ <LoadingLogo display='block' mx='auto' /> }>
+            { (usersWithGroups, setUser) => (
+              <GetSites selector={ getAllSites }>
+                { (pending, sites) => {
+                  const getSiteNames = mapGroupIdsToSiteNames(sites);
+                  return (
+                    <React.Fragment>
+                      <Row mb={ 7 }>
+                        <Col width={ 1 }>
+                          { notification }
+                          <Table collapsed>
+                            <Thead>
+                              <Tr>
+                                <Th ta='left'>Name</Th>
+                                <Th ta='left'>Sites</Th>
+                                <Th ta='left'>Role</Th>
+                                <Th ta='right' />
+                              </Tr>
+                            </Thead>
+                            <Tbody>
+                              { sortUserGroups(usersWithGroups).map(({ user, groups }) => {
+                                const siteNames = getSiteNames(groups);
+                                return (
+                                  <Tr key={ user.id }>
+                                    <Td>
+                                      <strong>{ formatFullName(user) }</strong>
+                                    </Td>
+                                    <Td>{ siteNames.length > 0 ? siteNames.join(', ') : 'None' }</Td>
+                                    <Td>{ getUserRoleName(user.roles) }</Td>
+                                    <Td ta='right'>
+                                      <Link to={ `${match.url}/edit/${user.id}` }>edit</Link>
+                                    </Td>
+                                  </Tr>
+                                );
+                              }) }
+                            </Tbody>
+                          </Table>
+                        </Col>
+                      </Row>
+                      <Route
+                        path={ `${match.url}/add` }
+                        render={ () => (
+                          <CreateUserModal
+                            onClose={ closeModal }
+                            onSuccess={ (user) => {
+                              setUser(user);
+                              showNotification(<InconsistentDataWarning />);
+                            } }
+                            sites={ sites }
+                          />
+                        ) }
+                      />
+                      <Route
+                        path={ `${match.url}/edit/:userId` }
+                        render={ ({ match }) => {
+                          const user = usersWithGroups.find((x) => x.user.id === match.params.userId);
+                          return user ? (
+                            <EditUserModal
+                              onClose={ closeModal }
+                              onSuccess={ (user) => {
+                                setUser(user);
+                                showNotification(<InconsistentDataWarning />);
+                              } }
+                              initialUserData={ user }
+                            />
+                          ) : null;
+                        } }
+                      />
+                    </React.Fragment>
+                  );
+                } }
+              </GetSites>
+            ) }
+          </FetchUsers>
         ) }
-      </FetchUsers>
+      </Notifier>
     </React.Fragment>
   );
 }
diff --git a/apps/weyland/src/account/components/__tests__/FetchUsers.spec.jsx b/apps/weyland/src/account/components/__tests__/FetchUsers.spec.jsx
deleted file mode 100644
index 0e04745f9..000000000
--- a/apps/weyland/src/account/components/__tests__/FetchUsers.spec.jsx
+++ /dev/null
@@ -1,74 +0,0 @@
-import { mockUser } from 'calpamos/src/authentication/__helpers__/mocks';
-import React from 'react';
-
-import { ViewContext } from 'calpamos/src/di';
-import createViewContextMock from 'calpamos/src/di/__helpers__/createViewContextMock';
-import { mountWithTheme } from 'calpamos/src/test-utils/theme';
-import UserManagementService from '../../services/UserManagementService';
-
-import FetchUsers from '../FetchUsers';
-
-jest.mock('../../services/UserManagementService');
-
-const childrenSpy = jest.fn();
-function Loading() {
-  return <div>Loading...</div>;
-}
-
-function mountFetchUsers(getUsersReturnValue) {
-  childrenSpy.mockReset().mockReturnValue(<div>success</div>);
-
-  const userManagementService = new UserManagementService();
-  userManagementService.getUsersWithGroups.mockReturnValue(getUsersReturnValue);
-
-  const viewContext = createViewContextMock({ userManagementService: userManagementService });
-
-  const wrapper = mountWithTheme(
-    <ViewContext.Provider context={ viewContext }>
-      <FetchUsers fallback={ <Loading /> }>{ childrenSpy }</FetchUsers>
-    </ViewContext.Provider>
-  );
-
-  return {
-    wrapper,
-    userAccountService: userManagementService
-  };
-}
-
-describe('Given the FetchUsers component', () => {
-  describe(`when mounted`, () => {
-    it('should render the fallback and call userManagementService.getUsers()', async () => {
-      const unresolvedPromise = new Promise(() => {});
-      const { wrapper } = mountFetchUsers(unresolvedPromise);
-
-      expect(wrapper.find(Loading).length).toBe(1);
-      expect(childrenSpy).not.toHaveBeenCalled();
-    });
-  });
-
-  describe(`when getting users succeeds`, () => {
-    it('should render the children func with the returned users', async () => {
-      const users = [ { user: '1' }, { user: 'another' } ];
-      const { wrapper } = mountFetchUsers(Promise.resolve(users));
-
-      await Promise.resolve();
-      wrapper.update();
-
-      expect(wrapper.find(Loading).length).toBe(0);
-      expect(childrenSpy).toHaveBeenCalledWith(users, null);
-    });
-  });
-
-  describe(`when getting users fails`, () => {
-    it('should render the children func with the thrown error', async () => {
-      const error = new Error('something terrible');
-      const { wrapper } = mountFetchUsers(Promise.reject(error));
-
-      await Promise.resolve();
-      wrapper.update();
-
-      expect(wrapper.find(Loading).length).toBe(0);
-      expect(childrenSpy).toHaveBeenCalledWith(null, error);
-    });
-  });
-});
diff --git a/apps/weyland/src/account/services/UserManagementService.js b/apps/weyland/src/account/services/UserManagementService.js
deleted file mode 100644
index 9f5f4669d..000000000
--- a/apps/weyland/src/account/services/UserManagementService.js
+++ /dev/null
@@ -1,24 +0,0 @@
-import fetch from 'calpamos/src/services/fetch';
-import handleFriendlyResponse from 'calpamos/src/services/handleFriendlyResponse.client';
-
-export default class UserManagementService {
-  constructor({ basePath }, getAccessToken) {
-    this._basePath = basePath;
-    this._getAccessToken = getAccessToken;
-  }
-
-  async getUsersWithGroups() {
-    const url = `${this._basePath}/api/users-with-groups`;
-    const options = {
-      method: 'GET',
-      headers: {
-        Accept: 'application/json',
-        Authorization: `Bearer ${this._getAccessToken()}`
-      }
-    };
-
-    const { data } = await fetch(url, options).then(handleFriendlyResponse(url));
-
-    return data;
-  }
-}
diff --git a/apps/weyland/src/account/services/__tests__/UserManagementService.spec.js b/apps/weyland/src/account/services/__tests__/UserManagementService.spec.js
deleted file mode 100644
index e3dc8e21b..000000000
--- a/apps/weyland/src/account/services/__tests__/UserManagementService.spec.js
+++ /dev/null
@@ -1,38 +0,0 @@
-import { mockUser } from 'calpamos/src/authentication/__helpers__/mocks';
-import fetch from 'calpamos/src/services/fetch';
-import UserManagementService from '../UserManagementService';
-
-jest.mock('calpamos/src/services/fetch');
-
-const settings = { basePath: 'http://google.com' };
-const getAccessToken = () => 'some complicated list of characters';
-
-const userManagementService = new UserManagementService(settings, getAccessToken);
-
-describe('Given the UserManagementService', () => {
-  beforeEach(() => {
-    fetch.mockReset();
-  });
-  describe('when getting users with groups', () => {
-    it('should GET /api/users-with-groups with access token in authorization header', async () => {
-      const users = [ { user: mockUser(), groups: [ '1', '2' ] }, { user: mockUser(), groups: [ '3' ] } ];
-      fetch.mockResolvedValueOnce(
-        new Response(JSON.stringify({ data: users }), {
-          status: 200,
-          headers: { 'Content-Type': 'application/json' }
-        })
-      );
-
-      const result = await userManagementService.getUsersWithGroups();
-
-      expect(fetch).toHaveBeenLastCalledWith(`${settings.basePath}/api/users-with-groups`, {
-        method: 'GET',
-        headers: {
-          Accept: 'application/json',
-          Authorization: `Bearer ${getAccessToken()}`
-        }
-      });
-      expect(result).toEqual(users);
-    });
-  });
-});
diff --git a/apps/weyland/src/auth/helpers/__tests__/canEditGroups.spec.js b/apps/weyland/src/auth/helpers/__tests__/canEditGroups.spec.js
new file mode 100644
index 000000000..ae2fb0d65
--- /dev/null
+++ b/apps/weyland/src/auth/helpers/__tests__/canEditGroups.spec.js
@@ -0,0 +1,66 @@
+import SiteService from 'calpamos/src/services/SiteService/SiteService';
+import { mockSiteWithIds } from 'calpamos/src/sites/__helpers__/mocks';
+
+import canEditGroups from '../canEditGroups';
+
+jest.mock('calpamos/src/services/SiteService/SiteService');
+
+const siteService = new SiteService();
+const getGroupIds = jest.fn();
+const getOrganizationGroupId = jest.fn();
+describe('Given the canEditGroups function', () => {
+  describe('when the current user is a member of each of the requested groups', () => {
+    it('should not have called site service and simply returned true', async () => {
+      const requestedGroups = [ 'group-a', 'group-b' ];
+      getGroupIds.mockReturnValueOnce([ ...requestedGroups, 'group-c' ]);
+
+      const result = await canEditGroups(siteService, getGroupIds, getOrganizationGroupId)(requestedGroups);
+
+      expect(result).toEqual(true);
+      expect(siteService.getSitesForGroupId).not.toHaveBeenCalled();
+    });
+  });
+  describe(`when the current user is not a member of some of the groups`, () => {
+    describe('and they are not a member of the organization', () => {
+      it('should return false', async () => {
+        const requestedGroups = [ 'group-a', 'group-b' ];
+        getGroupIds.mockReturnValueOnce([ 'group-b' ]);
+        getOrganizationGroupId.mockReturnValueOnce('org-group');
+
+        const result = await canEditGroups(siteService, getGroupIds, getOrganizationGroupId)(requestedGroups);
+
+        expect(result).toEqual(false);
+      });
+    });
+    describe('and they are a member of the organization which does not contain all of the missing groups', () => {
+      it('should return false', async () => {
+        const requestedGroups = [ 'missing-group-a', 'group-b', 'group-c' ];
+        getGroupIds.mockReturnValueOnce([ 'org-group', 'group-c' ]);
+        getOrganizationGroupId.mockReturnValueOnce('org-group');
+
+        siteService.getSitesForGroupId.mockResolvedValue([ mockSiteWithIds({ groupId: 'group-b' }) ]);
+
+        const result = await canEditGroups(siteService, getGroupIds, getOrganizationGroupId)(requestedGroups);
+
+        expect(result).toEqual(false);
+      });
+    });
+    describe('and they are a member of the organiztion which contains all of the missing groups', () => {
+      it('should should get organization groups correctly and return true', async () => {
+        const requestedGroups = [ 'group-a', 'group-b', 'group-c' ];
+        getGroupIds.mockReturnValueOnce([ 'org-group', 'group-c' ]);
+        getOrganizationGroupId.mockReturnValueOnce('org-group');
+
+        siteService.getSitesForGroupId.mockResolvedValue([
+          mockSiteWithIds({ groupId: 'group-a' }),
+          mockSiteWithIds({ groupId: 'group-b' })
+        ]);
+
+        const result = await canEditGroups(siteService, getGroupIds, getOrganizationGroupId)(requestedGroups);
+
+        expect(result).toEqual(true);
+        expect(siteService.getSitesForGroupId).toHaveBeenCalledWith('org-group');
+      });
+    });
+  });
+});
diff --git a/apps/weyland/src/auth/helpers/canEditGroups.js b/apps/weyland/src/auth/helpers/canEditGroups.js
new file mode 100644
index 000000000..5e656fb6f
--- /dev/null
+++ b/apps/weyland/src/auth/helpers/canEditGroups.js
@@ -0,0 +1,22 @@
+export default (siteService, getGroupIds, getOrganizationGroupId) => async (groupIds) => {
+  const usersGroupIds = getGroupIds();
+
+  const missingGroups = groupIds.filter((groupId) => !usersGroupIds.includes(groupId));
+
+  if (missingGroups.length === 0) {
+    return true;
+  }
+
+  const organizationGroupId = getOrganizationGroupId();
+  const canEditOrganization = usersGroupIds.includes(organizationGroupId);
+
+  if (canEditOrganization) {
+    const organizationGroups = await siteService.getSitesForGroupId(organizationGroupId);
+    const organizationGroupIds = organizationGroups.map((x) => x.groupId);
+
+    if (missingGroups.every((groupId) => organizationGroupIds.includes(groupId))) {
+      return true;
+    }
+  }
+  return false;
+};
diff --git a/apps/weyland/src/configureClientContext.js b/apps/weyland/src/configureClientContext.js
index 65018a410..21f110397 100644
--- a/apps/weyland/src/configureClientContext.js
+++ b/apps/weyland/src/configureClientContext.js
@@ -14,7 +14,6 @@ import initPageViewTracking from 'calpamos/src/tracking/initPageViewTracking';
 import { AuthService, getAccessToken } from 'calpamos/src/authentication/client';
 import { createStoreInitializer } from 'calpamos/src/utils/redux';
 import UserAccountService from './account/services/UserAccountService';
-import UserManagementService from './account/services/UserManagementService';
 
 import createSearchPatientsService from './patients/services/searchPatients.client';
 import SiteService from './sites/services/SiteService.client';
@@ -72,6 +71,7 @@ export default (settings, history) => (map) => {
       'paymentMethodService',
       'invitesService',
       'transactionsService',
+      'userService',
       'redirectTo',
       'hubspotTracker',
       'tracker',
@@ -142,11 +142,6 @@ export default (settings, history) => (map) => {
     .as(LAZY, SINGLETON, PROVIDER)
     .injecting('settings', 'storage');
 
-  map('userManagementService')
-    .to(UserManagementService)
-    .as(LAZY, SINGLETON, CONSTRUCTOR)
-    .injecting('settings', 'getAccessToken');
-
   map('userAccountService')
     .to(UserAccountService)
     .as(LAZY, SINGLETON, CONSTRUCTOR)
diff --git a/apps/weyland/src/configureRequestContext.js b/apps/weyland/src/configureRequestContext.js
index 0006b4d9a..fb3ce8ba6 100644
--- a/apps/weyland/src/configureRequestContext.js
+++ b/apps/weyland/src/configureRequestContext.js
@@ -15,7 +15,6 @@ import errorHandler from 'calpamos/src/handlers/errorHandler';
 import SiteLocationService from 'calpamos/src/services/SiteService/SiteLocationService';
 import SiteService from 'calpamos/src/services/SiteService/SiteService';
 import OrganizationService from 'calpamos/src/services/OrganizationService';
-import getUsersWithGroups from './account/handlers/getUsersWithGroups';
 
 // services
 import DeprecatedUserService from './auth/services/UserService';
@@ -29,6 +28,7 @@ import { sendNewBaseUserWelcomeEmail } from './sites/server';
 import TransactionsService from './transactions/services/TransactionsService.server';
 // activities
 import { saveSite as saveSiteActivity } from 'calpamos/src/manageSites/server';
+import { createUserActivity } from './users/server';
 // account handlers
 import changePassword from './account/handlers/changePassword';
 import updateAccountSettings from './account/handlers/updateAccountSettings';
@@ -54,7 +54,7 @@ import putPaymentMethod from './payment/handlers/putPaymentMethod';
 // transactions handlers
 import getTransactions from './transactions/handlers/getTransactions';
 // users handlers
-import { isUserEmailUsed } from './users/server';
+import { isUserEmailUsed, createUser, editUser, getUsers } from './users/server';
 // sites handlers
 import getSites from './sites/handlers/getSites';
 import { saveSiteList } from './sites/server';
@@ -65,6 +65,9 @@ import inviteUser from './handlers/inviteUser';
 
 import ErrorPage from './components/ErrorPage.jsx';
 
+// auth helpers
+import canEditGroups from './auth/helpers/canEditGroups';
+
 export default (request, requestLogger, reqPerformance) => (map) => {
   // essentials mappings
   map('query')
@@ -93,6 +96,11 @@ export default (request, requestLogger, reqPerformance) => (map) => {
     .as(LAZY, SINGLETON, CONSTRUCTOR)
     .injecting('authnClient', 'settings');
 
+  map('canEditGroups')
+    .to(canEditGroups)
+    .as(LAZY, SINGLETON, PROVIDER)
+    .injecting('siteService', 'getDirectMembershipGroupIds', 'getSelfServeOrganizationGroupId');
+
   // metadata for services
   map('getMetadata')
     .to(() => getRequestMetadata(request))
@@ -180,6 +188,10 @@ export default (request, requestLogger, reqPerformance) => (map) => {
     .to(saveSiteActivity)
     .as(LAZY, SINGLETON, PROVIDER)
     .injecting('siteService', 'userService', 'log');
+  map('createUserActivity')
+    .to(createUserActivity)
+    .as(LAZY, SINGLETON, PROVIDER)
+    .injecting('userService', 'log');
 
   // handlers
   map('appHandler')
@@ -292,8 +304,16 @@ export default (request, requestLogger, reqPerformance) => (map) => {
   map('getAccountMemberships')
     .to(getAccountMemberships)
     .as(FUNCTION);
-  map('getUsersWithGroups')
-    .to(getUsersWithGroups)
+  map('getUsers')
+    .to(getUsers)
+    .as(LAZY, SINGLETON, PROVIDER)
+    .injecting('userService');
+  map('createUser')
+    .to(createUser)
+    .as(LAZY, SINGLETON, PROVIDER)
+    .injecting('createUserActivity', 'canEditGroups');
+  map('editUser')
+    .to(editUser)
     .as(LAZY, SINGLETON, PROVIDER)
     .injecting('userService');
   map('errorHandler')
diff --git a/apps/weyland/src/configureStore.js b/apps/weyland/src/configureStore.js
index 6c400092e..735e87cc1 100644
--- a/apps/weyland/src/configureStore.js
+++ b/apps/weyland/src/configureStore.js
@@ -14,6 +14,7 @@ import patientSearch from 'calpamos/src/patientSearch/reducer';
 import conditions from './conditions/reducer';
 import transactions from './transactions/reducer';
 import payment from './payment/reducer';
+import { reducer as siteUsers } from 'calpamos/src/siteUsers';
 
 import persistConfig from './persistConfig';
 
@@ -27,7 +28,8 @@ const rootReducer = combineReducers({
   notifications,
   patientSearch,
   payment,
-  sites
+  sites,
+  siteUsers
 });
 
 export default function (initialState, log) {
diff --git a/apps/weyland/src/endpoints.js b/apps/weyland/src/endpoints.js
index d1ba7c36c..f34153a0d 100644
--- a/apps/weyland/src/endpoints.js
+++ b/apps/weyland/src/endpoints.js
@@ -10,6 +10,8 @@ import localDefinitionsSchema from '../schemas/definitions.json';
 import createInviteRsvpRequest from '../schemas/createInviteRsvpRequest.json';
 import createInviteRequestSchema from '../schemas/createInviteRequest.json';
 import inviteUserRequestSchema from '../schemas/inviteUserRequest.json';
+import createUserRequestSchema from '../schemas/createUserRequest.json';
+import editUserRequestSchema from '../schemas/editUserRequest.json';
 import patientSearchRequestSchema from '../schemas/patientSearchRequest.json';
 import replyInviteRequestSchema from '../schemas/replyInviteRequest.json';
 import unsubscribeRequestSchema from '../schemas/unsubscribeRequest.json';
@@ -121,14 +123,28 @@ export function createRouter({ auth0Domain, basePath }) {
 
   // users
   api.post(
-    '/users',
+    '/base-users',
     authenticate,
     authorize([ 'create:base_users' ]),
     validateBody(inviteUserRequestSchema),
     getReqHandler('inviteUser')
   );
   api.head('/users/email/:email', authenticate, getReqHandler('isUserEmailUsed'));
-  api.get('/users-with-groups', authenticate, getReqHandler('getUsersWithGroups'));
+  api.get('/users', authenticate, getReqHandler('getUsers'));
+  api.patch(
+    '/users/:userId',
+    authenticate,
+    authorize([ 'create:locations' ]),
+    validateBody(editUserRequestSchema),
+    getReqHandler('editUser')
+  ); // scopes need updating
+  api.post(
+    '/users',
+    authenticate,
+    authorize([ 'create:locations' ]),
+    validateBody(createUserRequestSchema),
+    getReqHandler('createUser')
+  ); // scopes need updating
 
   // patient invite actions
   api.put('/invite/reply', validateBody(replyInviteRequestSchema), getReqHandler('replyInvite'));
diff --git a/apps/weyland/src/sagas/index.js b/apps/weyland/src/sagas/index.js
index e30d2f056..198ae90db 100644
--- a/apps/weyland/src/sagas/index.js
+++ b/apps/weyland/src/sagas/index.js
@@ -10,6 +10,7 @@ import paymentMethodSaga from '../payment/sagas';
 import { APP_MODULE_NAME } from '../constants';
 import patientsSaga from '../patients/saga';
 import { fetchAccountStatus, fetchFakeAccountStatus } from '../payment/sagas';
+import { saga as usersSaga } from '../users/client';
 
 import startUpApp from './startUp';
 import trackingSaga from './tracking';
@@ -22,6 +23,7 @@ export default function * rootSaga(
   paymentMethodService,
   invitesService,
   transactionsService,
+  userService,
   redirectTo,
   hubspotTracker,
   tracker,
@@ -46,6 +48,7 @@ export default function * rootSaga(
     fork(paymentMethodSaga, paymentMethodService, accountStatusService, redirectTo, log),
     fork(invitesSaga, invitesService, redirectTo, log),
     fork(transactionsSaga, transactionsService, log),
-    fork(trackingSaga, tracker, APP_MODULE_NAME)
+    fork(trackingSaga, tracker, APP_MODULE_NAME),
+    fork(usersSaga, userService)
   ]);
 }
diff --git a/apps/weyland/src/users/__tests__/integration.spec.js b/apps/weyland/src/users/__tests__/integration.spec.js
new file mode 100644
index 000000000..c9824747f
--- /dev/null
+++ b/apps/weyland/src/users/__tests__/integration.spec.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import { combineReducers } from 'redux';
+import { Provider } from 'react-redux';
+import { mount } from 'enzyme';
+
+import { mockUserWithId } from 'calpamos/src/authentication/__helpers__/mocks';
+import { createStore } from 'calpamos/src/utils/redux';
+import { reducer as siteUsersReducer, setUser } from 'calpamos/src/siteUsers';
+import { fetchAllUsers } from '../actions';
+
+import FetchUsers from '../components/FetchUsers';
+import usersSaga from '../saga';
+import UserService from '../services/UserService.client';
+
+jest.mock('../services/UserService.client');
+
+const users = [ { user: mockUserWithId(), groups: [ 'group1' ] }, { user: mockUserWithId(), groups: [ 'group2' ] } ];
+const userService = new UserService();
+
+const initStoreAndRunSaga = () => {
+  const rootReducer = combineReducers({ siteUsers: siteUsersReducer });
+  const store = createStore(rootReducer);
+  const wiredSaga = usersSaga.bind(null, userService);
+
+  store.runSaga(wiredSaga);
+
+  store.dispatch = jest.fn(store.dispatch);
+  return store;
+};
+
+describe('Given a store configured with the users reducer from calpamos and users saga from weyland', () => {
+  afterEach(() => {
+    userService.getUsers.mockClear();
+  });
+
+  describe('when rendering the FetchUsers component', () => {
+    it(`should:
+        - dispatch a ${fetchAllUsers().type} action
+        - invoke the provided FaCC with:
+          - the content of the users state
+          - a set user function`, async () => {
+      userService.getUsers.mockResolvedValueOnce(users);
+      const newUser = { user: mockUserWithId() };
+      const childrenFaCCSpy = jest.fn(() => null);
+      const store = initStoreAndRunSaga();
+
+      mount(
+        <Provider store={ store }>
+          <FetchUsers fallback={ 'Loading...' }>{ childrenFaCCSpy }</FetchUsers>
+        </Provider>
+      );
+
+      await Promise.resolve();
+
+      expect(store.dispatch).toHaveBeenCalledWith(fetchAllUsers());
+      expect(userService.getUsers).toHaveBeenCalled();
+      expect(childrenFaCCSpy).toHaveBeenCalledWith(users, expect.any(Function));
+
+      childrenFaCCSpy.mock.calls[ 0 ][ 1 ](newUser);
+      expect(store.dispatch).toHaveBeenCalledWith(setUser(newUser));
+      expect(childrenFaCCSpy).toHaveBeenCalledWith([ ...users, newUser ], expect.any(Function));
+    });
+  });
+});
diff --git a/apps/weyland/src/users/actions.js b/apps/weyland/src/users/actions.js
new file mode 100644
index 000000000..93b16608a
--- /dev/null
+++ b/apps/weyland/src/users/actions.js
@@ -0,0 +1,3 @@
+import { FETCH_ALL_USERS } from './constants';
+
+export const fetchAllUsers = () => ({ type: FETCH_ALL_USERS });
diff --git a/apps/weyland/src/users/activities/__tests__/createUser.spec.js b/apps/weyland/src/users/activities/__tests__/createUser.spec.js
new file mode 100644
index 000000000..2da3e1c25
--- /dev/null
+++ b/apps/weyland/src/users/activities/__tests__/createUser.spec.js
@@ -0,0 +1,68 @@
+import { mockUser, mockUserWithId } from 'calpamos/src/authentication/__helpers__/mocks';
+import UserService from 'calpamos/src/services/UserService';
+
+jest.mock('calpamos/src/services/UserService');
+import createUser from '../createUser';
+
+const user = mockUser();
+const createdUser = mockUserWithId(user);
+const groups = [ 'group-a', 'group-b' ];
+
+let userService, logger;
+
+describe('Given the createUser activity', () => {
+  beforeEach(() => {
+    userService = new UserService();
+    logger = { error: jest.fn(), captureException: jest.fn() };
+  });
+  describe('when all requests are successful', () => {
+    it(`should:
+        - create the user
+        - link the new user to the specified groups`, async () => {
+      userService.create.mockResolvedValueOnce(createdUser);
+      userService.linkToGroups.mockResolvedValueOnce();
+
+      const result = await createUser(userService)(user, groups);
+
+      expect(result).toEqual(createdUser);
+      expect(userService.create).toHaveBeenCalledWith(user);
+      expect(userService.linkToGroups).toHaveBeenCalledWith(createdUser, groups);
+    });
+  });
+  describe('when userService.create fails', () => {
+    it(`should bubble the error and not call userService.linkToGroups`, async () => {
+      const error = new Error('oops');
+      userService.create.mockRejectedValueOnce(error);
+
+      await expect(createUser(userService)(user, groups)).rejects.toEqual(error);
+
+      expect(userService.linkToGroups).not.toHaveBeenCalled();
+    });
+  });
+  describe('when userService.linkToGroups fails', () => {
+    it(`should delete the user before throwing an exception`, async () => {
+      const error = new Error('oops');
+      userService.create.mockResolvedValueOnce(createdUser);
+      userService.linkToGroups.mockRejectedValueOnce(error);
+
+      await expect(createUser(userService, logger)(user, groups)).rejects.toEqual(error);
+
+      expect(userService.delete).toHaveBeenCalledWith(createdUser);
+    });
+  });
+  describe('when userService.linkToGroups fails and then deleting the user fails', () => {
+    it(`should log the error with enough detail to be handled manually`, async () => {
+      const error = new Error('oops');
+      const rollbackError = new Error('rollback error -- oh dear!');
+      userService.create.mockResolvedValueOnce(createdUser);
+      userService.linkToGroups.mockRejectedValueOnce(error);
+      userService.delete.mockRejectedValueOnce(rollbackError);
+
+      await expect(createUser(userService, logger)(user, groups)).rejects.toEqual(error);
+
+      expect(userService.delete).toHaveBeenCalledWith(createdUser);
+      expect(logger.error).toHaveBeenCalledWith('An error occurred while rolling back creating user', { createdUser });
+      expect(logger.captureException).toHaveBeenCalledWith(rollbackError);
+    });
+  });
+});
diff --git a/apps/weyland/src/users/activities/createUser.js b/apps/weyland/src/users/activities/createUser.js
new file mode 100644
index 000000000..f43c6186b
--- /dev/null
+++ b/apps/weyland/src/users/activities/createUser.js
@@ -0,0 +1,17 @@
+export default (userService, logger) => async (user, groups) => {
+  const createdUser = await userService.create(user);
+
+  try {
+    await userService.linkToGroups(createdUser, groups);
+  } catch (error) {
+    try {
+      await userService.delete(createdUser);
+    } catch (rollbackError) {
+      logger.error('An error occurred while rolling back creating user', { createdUser });
+      logger.captureException(rollbackError);
+    }
+    throw error;
+  }
+
+  return createdUser;
+};
diff --git a/apps/weyland/src/users/client.js b/apps/weyland/src/users/client.js
index 5b9d39875..95ed87bfc 100644
--- a/apps/weyland/src/users/client.js
+++ b/apps/weyland/src/users/client.js
@@ -1 +1,3 @@
 export { default as UserService } from './services/UserService.client';
+export * from './actions';
+export { default as saga } from './saga';
diff --git a/apps/weyland/src/users/components/CreateUserModal.jsx b/apps/weyland/src/users/components/CreateUserModal.jsx
new file mode 100644
index 000000000..9a35073c9
--- /dev/null
+++ b/apps/weyland/src/users/components/CreateUserModal.jsx
@@ -0,0 +1,141 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { Field } from 'formik';
+import get from 'lodash/get';
+import has from 'lodash/has';
+import styled from 'styled-components';
+
+import ErrorText from 'calpamos/src/ui/inputs/ErrorText.jsx';
+import { minLength } from 'calpamos/src/validators';
+import { createEmptyUser } from 'calpamos/src/authentication/helpers';
+import { Table, Tbody, Td, Th, Thead, Tr } from 'calpamos/src/ui/table';
+import { Row, Col } from 'calpamos/src/ui/grid';
+import { Box, Heading, Text } from 'calpamos/src/ui/primitives';
+import { Button } from 'calpamos/src/ui/buttons';
+import Modal from 'calpamos/src/ui/Modal.jsx';
+import { FormikManager } from 'calpamos/src/utils/formik';
+import { UserProfileFields } from 'calpamos/src/manageSites/client';
+import { ViewContext } from 'calpamos/src/di';
+import NotificationBar, { WARNING } from 'calpamos/src/ui/NotificationBar.jsx';
+import Loading from 'calpamos/src/ui/Loading.jsx';
+import CheckboxItem from 'calpamos/src/ui/inputs/CheckboxItem.jsx';
+
+const SubHeading = styled(Heading).attrs({ small: true })`
+  color: ${(props) => props.theme.colors.gray06};
+`;
+
+const emailExistValidator = (emailExists, message) => async (email) => {
+  return (await emailExists(email)) ? message : null;
+};
+
+export default function CreateUserModal({ onClose, onSuccess, sites }) {
+  return (
+    <ViewContext.Consumer dependencies={ [ 'userService' ] }>
+      { ({ userService }) => (
+        <FormikManager
+          onSubmit={ async (formData) => {
+            const createdUser = await userService.create(formData);
+            onSuccess(createdUser);
+          } }
+          onSuccessfulSubmit={ onClose }
+          initialValues={ { user: createEmptyUser(), groups: [] } }
+        >
+          { ({ handleSubmit, status, isSubmitting }) => (
+            <Modal
+              isOpen
+              width='920px'
+              onRequestClose={ onClose }
+              contentLabel={ 'Add a new user' }
+              isLocked={ isSubmitting }
+            >
+              <form onSubmit={ handleSubmit } onReset={ onClose }>
+                <Row>
+                  <Col>
+                    <Heading mt={ 4 } mb={ 7 } is='h4' fw='bold'>
+                      Add a new user
+                    </Heading>
+                    { status.error != null && (
+                      <NotificationBar compact severity={ WARNING } mb={ 7 }>
+                        <Text small>
+                          Unfortunately there was an error saving the user. Please try again in 5 minutes or contact the
+                          Antidote team if the problem persists.
+                        </Text>
+                      </NotificationBar>
+                    ) }
+                  </Col>
+                </Row>
+                <Row>
+                  <Col width={ 1 / 2 }>
+                    <UserProfileFields
+                      name={ 'user' }
+                      disabled={ isSubmitting }
+                      validateEmail={ emailExistValidator(
+                        userService.isEmailUsed.bind(userService),
+                        'A user with that email already exists'
+                      ) }
+                    />
+                    <Box pt={ 7 }>
+                      <Loading loading={ isSubmitting }>
+                        <Button type='submit'>Add user</Button>
+                      </Loading>
+                      <Button secondary ml={ 3 } type='reset' disabled={ isSubmitting }>
+                        Cancel
+                      </Button>
+                    </Box>
+                  </Col>
+                  <Col width={ 1 / 2 }>
+                    <Field name='groups' validate={ minLength(1, 'Please select at least one site') }>
+                      { ({ field, form }) => (
+                        <React.Fragment>
+                          <SubHeading is='h3'>Site Permissions</SubHeading>
+                          { has(form.errors, field.name) && <ErrorText>{ get(form.errors, field.name) }</ErrorText> }
+                          <Table>
+                            <Thead>
+                              <Tr>
+                                <Th ta='left'>Site</Th>
+                                <Th ta='right'>Access</Th>
+                              </Tr>
+                            </Thead>
+                            <Tbody>
+                              { sites.map((site) => (
+                                <Tr key={ site.id }>
+                                  <Td ta='left' va='middle' py={ 1 }>
+                                    { site.name }
+                                  </Td>
+                                  <Td ta='right' va='middle' py={ 1 } pr={ 0 }>
+                                    <CheckboxItem
+                                      name={ site.groupId }
+                                      display='inline-block'
+                                      checked={ field.value.includes(site.groupId) }
+                                      disabled={ isSubmitting }
+                                      onChange={ () => {
+                                        const updatedValue = field.value.includes(site.groupId) ?
+                                          field.value.filter((x) => x !== site.groupId) :
+                                          field.value.concat(site.groupId);
+                                        form.setFieldValue(field.name, updatedValue);
+                                      } }
+                                      mb={ 0 }
+                                    />
+                                  </Td>
+                                </Tr>
+                              )) }
+                            </Tbody>
+                          </Table>
+                        </React.Fragment>
+                      ) }
+                    </Field>
+                  </Col>
+                </Row>
+              </form>
+            </Modal>
+          ) }
+        </FormikManager>
+      ) }
+    </ViewContext.Consumer>
+  );
+}
+
+CreateUserModal.propTypes = {
+  onClose: PropTypes.func.isRequired,
+  sites: PropTypes.arrayOf(PropTypes.object)
+};
diff --git a/apps/weyland/src/users/components/EditUserModal.jsx b/apps/weyland/src/users/components/EditUserModal.jsx
new file mode 100644
index 000000000..6c6fbbc5b
--- /dev/null
+++ b/apps/weyland/src/users/components/EditUserModal.jsx
@@ -0,0 +1,76 @@
+import { formatFullName } from 'calpamos/src/utils/formatters';
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import { Row, Col } from 'calpamos/src/ui/grid';
+import { Box, Heading, Text } from 'calpamos/src/ui/primitives';
+import { Button } from 'calpamos/src/ui/buttons';
+import Modal from 'calpamos/src/ui/Modal.jsx';
+import { FormikManager } from 'calpamos/src/utils/formik';
+import { UserProfileFields } from 'calpamos/src/manageSites/client';
+import { ViewContext } from 'calpamos/src/di';
+import NotificationBar, { WARNING } from 'calpamos/src/ui/NotificationBar.jsx';
+import Loading from 'calpamos/src/ui/Loading.jsx';
+
+export default function EditUserModal({ onClose, onSuccess, initialUserData }) {
+  return (
+    <ViewContext.Consumer dependencies={ [ 'userService' ] }>
+      { ({ userService }) => (
+        <FormikManager
+          onSubmit={ async ({ user, ...rest }) => {
+            const returnedUser = await userService.edit(user);
+            onSuccess({ ...rest, ...returnedUser });
+          } }
+          onSuccessfulSubmit={ onClose }
+          initialValues={ initialUserData }
+        >
+          { ({ handleSubmit, status, isSubmitting }) => (
+            <Modal
+              isOpen
+              width='920px'
+              onRequestClose={ onClose }
+              contentLabel={ formatFullName(initialUserData.user) }
+              isLocked={ isSubmitting }
+            >
+              <form onSubmit={ handleSubmit } onReset={ onClose }>
+                <Row>
+                  <Col>
+                    <Heading mt={ 4 } mb={ 7 } is='h4' fw='bold'>
+                      { formatFullName(initialUserData.user) }
+                    </Heading>
+                    { status.error != null && (
+                      <NotificationBar compact severity={ WARNING } mb={ 7 }>
+                        <Text small>
+                          Unfortunately there was an error saving the user. Please try again in 5 minutes or contact the
+                          Antidote team if the problem persists.
+                        </Text>
+                      </NotificationBar>
+                    ) }
+                  </Col>
+                </Row>
+                <Row>
+                  <Col width={ 1 / 2 }>
+                    <UserProfileFields name='user' disabled={ isSubmitting } />
+                    <Box pt={ 7 }>
+                      <Loading loading={ isSubmitting }>
+                        <Button type='submit'>Save changes</Button>
+                      </Loading>
+                      <Button secondary ml={ 3 } type='reset' disabled={ isSubmitting }>
+                        Cancel
+                      </Button>
+                    </Box>
+                  </Col>
+                </Row>
+              </form>
+            </Modal>
+          ) }
+        </FormikManager>
+      ) }
+    </ViewContext.Consumer>
+  );
+}
+
+EditUserModal.propTypes = {
+  initialUserData: PropTypes.object.isRequired,
+  onClose: PropTypes.func.isRequired
+};
diff --git a/apps/weyland/src/users/components/FetchUsers.jsx b/apps/weyland/src/users/components/FetchUsers.jsx
new file mode 100644
index 000000000..37c62207d
--- /dev/null
+++ b/apps/weyland/src/users/components/FetchUsers.jsx
@@ -0,0 +1,29 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import { GetUsers, setUser } from 'calpamos/src/siteUsers';
+import { connect } from 'react-redux';
+import { fetchAllUsers } from '../../users/actions';
+
+class FetchUsers extends React.Component {
+  componentDidMount() {
+    this.props.fetchAllUsers();
+  }
+
+  render() {
+    const { children, fallback, setUser } = this.props;
+    return <GetUsers>{ (users) => (!users ? fallback : children(users, setUser)) }</GetUsers>;
+  }
+}
+
+FetchUsers.propTypes = {
+  children: PropTypes.func,
+  fallback: PropTypes.node,
+  fetchAllUsers: PropTypes.func,
+  setUser: PropTypes.func
+};
+
+export default connect(
+  null,
+  { fetchAllUsers, setUser }
+)(FetchUsers);
diff --git a/apps/weyland/src/users/components/__tests__/CreateUserModal.spec.jsx b/apps/weyland/src/users/components/__tests__/CreateUserModal.spec.jsx
new file mode 100644
index 000000000..201c2e88f
--- /dev/null
+++ b/apps/weyland/src/users/components/__tests__/CreateUserModal.spec.jsx
@@ -0,0 +1,172 @@
+import React from 'react';
+import { IntlProvider } from 'react-intl';
+
+import { type } from 'calpamos/src/__helpers__/enzyme';
+import { mockSiteWithIds } from 'calpamos/src/sites/__helpers__/mocks';
+import task from 'calpamos/src/test-utils/task';
+import NotificationBar from 'calpamos/src/ui/NotificationBar';
+import { mockUserWithId } from 'calpamos/src/authentication/__helpers__/mocks';
+import createViewContextMock from 'calpamos/src/di/__helpers__/createViewContextMock';
+import { mountWithTheme } from 'calpamos/src/test-utils/theme';
+import { ViewContext } from 'calpamos/src/di';
+import Modal from 'calpamos/src/ui/Modal.jsx';
+
+import UserService from '../../services/UserService.client';
+import CreateUserModal from '../CreateUserModal';
+jest.mock('../../services/UserService.client');
+
+const sites = [ mockSiteWithIds(), mockSiteWithIds(), mockSiteWithIds() ];
+
+function submitAndWaitForSpy(wrapper, spy) {
+  return new Promise((resolve) => {
+    spy.mockImplementation(resolve);
+    wrapper.find('form').simulate('submit');
+  });
+}
+
+const renderModal = () => {
+  const onClose = jest.fn();
+  const onSuccess = jest.fn();
+  const userService = new UserService();
+
+  const wrapper = mountWithTheme(
+    <ViewContext.Provider context={ createViewContextMock({ userService }) }>
+      <IntlProvider locale='en-US'>
+        <CreateUserModal onClose={ onClose } onSuccess={ onSuccess } sites={ sites } />
+      </IntlProvider>
+    </ViewContext.Provider>
+  );
+
+  return { wrapper, onClose, onSuccess, userService };
+};
+
+describe('Given the CreateUserModal component', () => {
+  describe('when the form is filled in, a site is selected and the form is submitted', () => {
+    it('should save the edited user and callback the onSuccess and onClose callbacks', async () => {
+      const { wrapper, userService, onSuccess, onClose } = renderModal();
+      const returnedUserWithGroups = { user: mockUserWithId(), groups: [ 'group...a', 'group...b' ] };
+      userService.create.mockResolvedValue(returnedUserWithGroups);
+
+      const firstName = 'frank';
+      const lastName = 'Grimes';
+      const email = 'frank.grimes@springfield-green-energy.com';
+      type(wrapper.find('input[name="user.firstName"]'), firstName);
+      type(wrapper.find('input[name="user.lastName"]'), lastName);
+      type(wrapper.find('input[name="user.email"]'), email);
+      wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('onChange')();
+
+      await submitAndWaitForSpy(wrapper, onClose);
+
+      expect(userService.create).toHaveBeenCalledWith({
+        user: expect.objectContaining({ firstName, lastName, email }),
+        groups: [ sites[ 0 ].groupId ]
+      });
+      expect(onSuccess).toHaveBeenCalledWith(returnedUserWithGroups);
+      expect(onClose).toHaveBeenCalled();
+    });
+  });
+
+  describe('when the the form submission fails', () => {
+    it('should display an error Notification', async () => {
+      const { wrapper, userService, onSuccess, onClose } = renderModal();
+
+      userService.create.mockRejectedValue(new Error('something wicked this way comes'));
+
+      type(wrapper.find('input[name="user.firstName"]'), 'frank');
+      type(wrapper.find('input[name="user.lastName"]'), 'grimes');
+      type(wrapper.find('input[name="user.email"]'), 'some@email.com');
+      wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('onChange')();
+
+      wrapper.find('form').simulate('submit');
+      await task();
+      wrapper.update();
+
+      expect(wrapper.find(NotificationBar).text()).toEqual(
+        expect.stringContaining('Unfortunately there was an error saving the user.')
+      );
+
+      expect(onSuccess).not.toHaveBeenCalled();
+      expect(onClose).not.toHaveBeenCalled();
+    });
+  });
+
+  describe('when the form is submitted without selecting a site', () => {
+    it('should not submit the form but show a validation error on the sites', async () => {
+      const { wrapper, userService } = renderModal();
+
+      type(wrapper.find('input[name="user.firstName"]'), 'frank');
+      type(wrapper.find('input[name="user.lastName"]'), 'grimes');
+      type(wrapper.find('input[name="user.email"]'), 'some@email.com');
+      wrapper.find('form').simulate('submit');
+
+      await task();
+      wrapper.update();
+
+      expect(wrapper.find('ErrorText').text()).toEqual('Please select at least one site');
+      expect(userService.create).not.toHaveBeenCalled();
+    });
+  });
+
+  describe('when toggling on and off a site permission and then submitting', () => {
+    it('should not include the site that was toggled off', async () => {
+      const { wrapper, userService } = renderModal();
+
+      type(wrapper.find('input[name="user.firstName"]'), 'frank');
+      type(wrapper.find('input[name="user.lastName"]'), 'grimes');
+      type(wrapper.find('input[name="user.email"]'), 'some@email.com');
+
+      wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('onChange')();
+      wrapper.update();
+      wrapper.find(`CheckboxItem[name="${sites[ 1 ].groupId}"]`).prop('onChange')();
+      wrapper.update();
+      wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('onChange')();
+      wrapper.update();
+
+      wrapper.find('form').simulate('submit');
+      await submitAndWaitForSpy(wrapper, userService.create);
+
+      expect(userService.create).toHaveBeenCalledWith(expect.objectContaining({ groups: [ sites[ 1 ].groupId ] }));
+    });
+  });
+
+  describe('when toggling on and off a site', () => {
+    it('should display them as checked when checked and unchecked when unchecked', async () => {
+      const { wrapper } = renderModal();
+
+      type(wrapper.find('input[name="user.firstName"]'), 'frank');
+      type(wrapper.find('input[name="user.lastName"]'), 'grimes');
+      type(wrapper.find('input[name="user.email"]'), 'some@email.com');
+
+      wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('onChange')();
+      wrapper.update();
+      wrapper.find(`CheckboxItem[name="${sites[ 1 ].groupId}"]`).prop('onChange')();
+      wrapper.update();
+      wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('onChange')();
+      wrapper.update();
+
+      expect(wrapper.find(`CheckboxItem[name="${sites[ 0 ].groupId}"]`).prop('checked')).toBe(false);
+      expect(wrapper.find(`CheckboxItem[name="${sites[ 1 ].groupId}"]`).prop('checked')).toBe(true);
+    });
+  });
+
+  describe('when the modal is closed', () => {
+    it('should trigger the onClose callback', async () => {
+      const { wrapper, onClose } = renderModal();
+
+      wrapper.find(Modal).prop('onRequestClose')();
+
+      expect(onClose).toHaveBeenCalled();
+    });
+  });
+
+  describe('when the modal is cancelled', () => {
+    it('should trigger the onClose callback', async () => {
+      const { wrapper, onClose } = renderModal();
+
+      wrapper.find('form').simulate('reset');
+
+      expect(wrapper.find('button[type="reset"]').text()).toEqual('Cancel');
+      expect(onClose).toHaveBeenCalled();
+    });
+  });
+});
diff --git a/apps/weyland/src/users/components/__tests__/EditUserModal.spec.jsx b/apps/weyland/src/users/components/__tests__/EditUserModal.spec.jsx
new file mode 100644
index 000000000..e13503d41
--- /dev/null
+++ b/apps/weyland/src/users/components/__tests__/EditUserModal.spec.jsx
@@ -0,0 +1,109 @@
+import React from 'react';
+import { IntlProvider } from 'react-intl';
+
+import NotificationBar from 'calpamos/src/ui/NotificationBar';
+import task from 'calpamos/src/test-utils/task';
+import { type } from 'calpamos/src/__helpers__/enzyme';
+import Modal from 'calpamos/src/ui/Modal.jsx';
+import { mockUserWithId } from 'calpamos/src/authentication/__helpers__/mocks';
+import createViewContextMock from 'calpamos/src/di/__helpers__/createViewContextMock';
+import { UserProfileFields } from 'calpamos/src/manageSites/client';
+import { mountWithTheme } from 'calpamos/src/test-utils/theme';
+import { ViewContext } from 'calpamos/src/di';
+
+import UserService from '../../services/UserService.client';
+import EditUserModal from '../EditUserModal';
+jest.mock('../../services/UserService.client');
+
+const initialUserData = { user: mockUserWithId(), groups: [ 'group-1', 'group-2' ] };
+
+function submitAndWaitForSpy(wrapper, spy) {
+  return new Promise((resolve) => {
+    spy.mockImplementation(resolve);
+    wrapper.find('form').simulate('submit');
+  });
+}
+
+const renderModal = () => {
+  const onClose = jest.fn();
+  const onSuccess = jest.fn();
+  const userService = new UserService();
+
+  const wrapper = mountWithTheme(
+    <ViewContext.Provider context={ createViewContextMock({ userService }) }>
+      <IntlProvider locale='en-US'>
+        <EditUserModal onClose={ onClose } onSuccess={ onSuccess } initialUserData={ initialUserData } />
+      </IntlProvider>
+    </ViewContext.Provider>
+  );
+
+  return { wrapper, onClose, onSuccess, userService };
+};
+
+describe('Given the EditUserModal component', () => {
+  describe('when rendered with user data', () => {
+    it('should render the user profile fields', () => {
+      const { wrapper } = renderModal();
+
+      const userFields = wrapper.find(UserProfileFields);
+      expect(userFields.find('input[name="user.firstName"]').prop('value')).toEqual(initialUserData.user.firstName);
+    });
+  });
+  describe('when the user is edited and the form is submitted', () => {
+    it('should save the edited user and callback the onSuccess and onClose callbacks', async () => {
+      const { wrapper, userService, onSuccess, onClose } = renderModal();
+
+      const returnedUser = { user: initialUserData.user, returnedUser: true };
+      userService.edit.mockResolvedValue(returnedUser);
+
+      const newFirstName = 'frank';
+      type(wrapper.find('input[name="user.firstName"]'), newFirstName);
+
+      await submitAndWaitForSpy(wrapper, onClose);
+
+      expect(userService.edit).toHaveBeenCalledWith({ ...initialUserData.user, firstName: newFirstName });
+      expect(onSuccess).toHaveBeenCalledWith({ ...initialUserData, ...returnedUser });
+      expect(onClose).toHaveBeenCalled();
+    });
+  });
+  describe('when the the form submission fails', () => {
+    it('should display an error Notification', async () => {
+      const { wrapper, userService, onSuccess, onClose } = renderModal();
+
+      userService.edit.mockRejectedValue(new Error('something wicked this way comes'));
+
+      const newFirstName = 'frank';
+      type(wrapper.find('input[name="user.firstName"]'), newFirstName);
+
+      wrapper.find('form').simulate('submit');
+      await task();
+      wrapper.update();
+
+      expect(wrapper.find(NotificationBar).text()).toEqual(
+        expect.stringContaining('Unfortunately there was an error saving the user.')
+      );
+
+      expect(onSuccess).not.toHaveBeenCalled();
+      expect(onClose).not.toHaveBeenCalled();
+    });
+  });
+  describe('when the modal is closed', () => {
+    it('should trigger the onClose callback', async () => {
+      const { wrapper, onClose } = renderModal();
+
+      wrapper.find(Modal).prop('onRequestClose')();
+
+      expect(onClose).toHaveBeenCalled();
+    });
+  });
+  describe('when the modal is cancelled', () => {
+    it('should trigger the onClose callback', async () => {
+      const { wrapper, onClose } = renderModal();
+
+      wrapper.find('form').simulate('reset');
+
+      expect(wrapper.find('button[type="reset"]').text()).toEqual('Cancel');
+      expect(onClose).toHaveBeenCalled();
+    });
+  });
+});
diff --git a/apps/weyland/src/users/constants.js b/apps/weyland/src/users/constants.js
new file mode 100644
index 000000000..a4b445996
--- /dev/null
+++ b/apps/weyland/src/users/constants.js
@@ -0,0 +1 @@
+export const FETCH_ALL_USERS = 'FETCH_ALL_USERS';
diff --git a/apps/weyland/src/users/handlers/__tests__/createUser.spec.js b/apps/weyland/src/users/handlers/__tests__/createUser.spec.js
new file mode 100644
index 000000000..235e44988
--- /dev/null
+++ b/apps/weyland/src/users/handlers/__tests__/createUser.spec.js
@@ -0,0 +1,63 @@
+import { mockUser, mockUserWithId } from 'calpamos/src/authentication/__helpers__/mocks';
+import { JWT_CUSTOM_CLAIMS_NAMESPACE } from 'calpamos/src/authentication/constants';
+import { createRequest, createResponse } from 'node-mocks-http';
+import createUser from '../createUser';
+
+jest.mock('calpamos/src/services/UserService');
+
+const user = mockUser();
+
+let createUserActivity;
+let canEditGroups;
+
+describe('Given the createUser Express.js handler', () => {
+  beforeEach(() => {
+    createUserActivity = jest.fn();
+    canEditGroups = jest.fn();
+  });
+
+  describe('when the user can NOT edit the requested groups', () => {
+    it(`should return 400 Bad Request and not call the create user activity`, async () => {
+      const req = createRequest({
+        method: 'PUT',
+        body: { user, groups: [ 'group-a', 'group-b' ] },
+        user: { [ `${JWT_CUSTOM_CLAIMS_NAMESPACE}direct_group_membership_ids` ]: [ 'group-a', 'differeth-group-b' ] }
+      });
+      const res = createResponse();
+
+      canEditGroups.mockResolvedValue(false);
+
+      await createUser(createUserActivity, canEditGroups)(req, res);
+
+      expect(res.statusCode).toBe(400);
+      expect(canEditGroups).toHaveBeenCalledWith([ 'group-a', 'group-b' ]);
+      expect(createUserActivity).not.toHaveBeenCalled();
+    });
+  });
+
+  describe('when the user can edit the requested groups', () => {
+    it(`should use the create user activity to create the user`, async () => {
+      const groups = [ 'group-a', 'group-b' ];
+      const req = createRequest({
+        method: 'PUT',
+        body: { user, groups },
+        user: { [ `${JWT_CUSTOM_CLAIMS_NAMESPACE}direct_group_membership_ids` ]: [ ...groups, 'another group' ] }
+      });
+      const res = createResponse();
+
+      canEditGroups.mockResolvedValue(true);
+
+      const createdUser = mockUserWithId(user);
+      createUserActivity.mockResolvedValue(createdUser);
+
+      await createUser(createUserActivity, canEditGroups)(req, res);
+
+      const responseBody = JSON.parse(res._getData());
+      expect(responseBody).toEqual({ data: { user: createdUser, groups } });
+      expect(res.statusCode).toEqual(200);
+
+      expect(canEditGroups).toHaveBeenCalledWith([ 'group-a', 'group-b' ]);
+      expect(createUserActivity).toHaveBeenCalledWith(user, groups);
+    });
+  });
+});
diff --git a/apps/weyland/src/users/handlers/createUser.js b/apps/weyland/src/users/handlers/createUser.js
new file mode 100644
index 000000000..f1ce88372
--- /dev/null
+++ b/apps/weyland/src/users/handlers/createUser.js
@@ -0,0 +1,12 @@
+export default (createUser, canEditGroups) => async (req, res) => {
+  const { user, groups } = req.body;
+
+  if (!(await canEditGroups(groups))) {
+    res.status(400).json({ message: 'You can only add members to groups if you are already a member.' });
+    return;
+  }
+
+  const createdUser = await createUser(user, groups);
+
+  res.status(200).json({ data: { user: createdUser, groups } });
+};
diff --git a/apps/weyland/src/users/handlers/editUser.js b/apps/weyland/src/users/handlers/editUser.js
new file mode 100644
index 000000000..d676a0ae6
--- /dev/null
+++ b/apps/weyland/src/users/handlers/editUser.js
@@ -0,0 +1,4 @@
+export default (userService) => async (req, res) => {
+  const user = await userService.edit({ ...req.body.user, id: req.params.userId });
+  res.json({ data: { user } });
+};
diff --git a/apps/weyland/src/account/handlers/getUsersWithGroups.js b/apps/weyland/src/users/handlers/getUsers.js
similarity index 100%
rename from apps/weyland/src/account/handlers/getUsersWithGroups.js
rename to apps/weyland/src/users/handlers/getUsers.js
diff --git a/apps/weyland/src/users/saga.js b/apps/weyland/src/users/saga.js
new file mode 100644
index 000000000..2aca0e0a2
--- /dev/null
+++ b/apps/weyland/src/users/saga.js
@@ -0,0 +1,12 @@
+import { call, put, take } from 'redux-saga/effects';
+
+import { setAllUsers } from 'calpamos/src/siteUsers';
+import { FETCH_ALL_USERS } from './constants';
+
+export default function * watchFetchUsers(userService) {
+  yield take(FETCH_ALL_USERS);
+
+  const users = yield call([ userService, 'getUsers' ]);
+
+  yield put(setAllUsers(users));
+}
diff --git a/apps/weyland/src/users/server.js b/apps/weyland/src/users/server.js
index 39329c654..5dc7e51a5 100644
--- a/apps/weyland/src/users/server.js
+++ b/apps/weyland/src/users/server.js
@@ -1 +1,6 @@
 export { default as isUserEmailUsed } from './handlers/isUserEmailUsed';
+export { default as createUser } from './handlers/createUser';
+export { default as editUser } from './handlers/editUser';
+export { default as getUsers } from './handlers/getUsers';
+
+export { default as createUserActivity } from './activities/createUser';
diff --git a/apps/weyland/src/users/services/UserService.client.js b/apps/weyland/src/users/services/UserService.client.js
index 55f39a0e0..05c7bfb31 100644
--- a/apps/weyland/src/users/services/UserService.client.js
+++ b/apps/weyland/src/users/services/UserService.client.js
@@ -1,9 +1,11 @@
 import fetch from 'calpamos/src/services/fetch';
 import { UnknownError } from 'calpamos/src/services/errors';
+import handleFriendlyResponse from 'calpamos/src/services/handleFriendlyResponse.client';
+import { sanitizeUser } from 'calpamos/src/utils/sanitizers';
 
 export default class UserService {
   constructor({ basePath }, getAccessToken) {
-    this._basePath = `${basePath}/api/users`;
+    this._basePath = basePath;
     this._getAccessToken = getAccessToken;
   }
 
@@ -14,7 +16,7 @@ export default class UserService {
   }
 
   async isEmailUsed(email) {
-    const url = `${this._basePath}/email/${email}`;
+    const url = `${this._basePath}/api/users/email/${email}`;
     const response = await fetch(url, {
       headers: this._headers,
       method: 'HEAD'
@@ -25,4 +27,51 @@ export default class UserService {
     }
     throw UnknownError.from(url).received(response.status, "Couldn't determine the reason of the error");
   }
+
+  async getUsers() {
+    const url = `${this._basePath}/api/users`;
+    const options = {
+      method: 'GET',
+      headers: {
+        Accept: 'application/json',
+        Authorization: `Bearer ${this._getAccessToken()}`
+      }
+    };
+
+    const { data } = await fetch(url, options).then(handleFriendlyResponse(url));
+
+    return data;
+  }
+
+  async create({ user, groups }) {
+    const url = `${this._basePath}/api/users`;
+    const options = {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'Accept': 'application/json',
+        'Authorization': `Bearer ${this._getAccessToken()}`
+      },
+      body: JSON.stringify({ user: sanitizeUser(user), groups })
+    };
+
+    const { data } = await fetch(url, options).then(handleFriendlyResponse(url));
+    return data;
+  }
+
+  async edit(user) {
+    const url = `${this._basePath}/api/users/${user.id}`;
+    const options = {
+      method: 'PATCH',
+      headers: {
+        'Content-Type': 'application/json',
+        'Accept': 'application/json',
+        'Authorization': `Bearer ${this._getAccessToken()}`
+      },
+      body: JSON.stringify({ user: sanitizeUser(user) })
+    };
+
+    const { data } = await fetch(url, options).then(handleFriendlyResponse(url));
+    return data;
+  }
 }
diff --git a/apps/weyland/src/users/services/__tests__/UserService.client.spec.js b/apps/weyland/src/users/services/__tests__/UserService.client.spec.js
index 42f9f51e2..2f2e71235 100644
--- a/apps/weyland/src/users/services/__tests__/UserService.client.spec.js
+++ b/apps/weyland/src/users/services/__tests__/UserService.client.spec.js
@@ -1,8 +1,11 @@
+import { mockUser, mockUserWithId } from 'calpamos/src/authentication/__helpers__/mocks';
 import fetch from 'calpamos/src/services/fetch';
 import { UnknownError } from 'calpamos/src/services/errors';
+import { sanitizeUser } from 'calpamos/src/utils/sanitizers';
 import UserService from '../UserService.client';
 
 jest.mock('calpamos/src/services/fetch');
+jest.mock('calpamos/src/utils/sanitizers');
 
 const accessToken = '123abc';
 const getAccessToken = jest.fn().mockReturnValue(accessToken);
@@ -12,6 +15,10 @@ const settings = {
 const service = new UserService(settings, getAccessToken);
 
 describe('Given the client-side version of the UserService', () => {
+  beforeEach(() => {
+    sanitizeUser.mockImplementation((v) => v);
+  });
+
   describe('when invoking the isEmailUsed method', () => {
     const email = 'chunkylover53@aol.com';
 
@@ -48,4 +55,94 @@ describe('Given the client-side version of the UserService', () => {
       return expect(service.isEmailUsed(email)).rejects.toThrowError(UnknownError);
     });
   });
+
+  describe('when getting users', () => {
+    it(`should:
+        - GET /api/users
+        - with access token in authorization header
+        - and return the response`, async () => {
+      const users = [ { user: mockUser(), groups: [ '1', '2' ] }, { user: mockUser(), groups: [ '3' ] } ];
+      fetch.mockResolvedValueOnce(
+        new Response(JSON.stringify({ data: users }), {
+          status: 200,
+          headers: { 'Content-Type': 'application/json' }
+        })
+      );
+
+      const result = await service.getUsers();
+
+      expect(fetch).toHaveBeenLastCalledWith(`${settings.basePath}/api/users`, {
+        method: 'GET',
+        headers: {
+          Accept: 'application/json',
+          Authorization: `Bearer ${getAccessToken()}`
+        }
+      });
+      expect(result).toEqual(users);
+    });
+  });
+
+  describe('when creating a user', () => {
+    it(`should:
+        - POST /api/users
+        - with access token in authorization header
+        - sanitize the user being created
+        - and return the data from response body`, async () => {
+      const userWithGroups = { user: mockUser(), groups: [ '1', '2' ] };
+      const responseData = { user: mockUserWithId(userWithGroups.user), groups: userWithGroups.groups };
+
+      fetch.mockResolvedValueOnce(
+        new Response(JSON.stringify({ data: responseData }), {
+          status: 200,
+          headers: { 'Content-Type': 'application/json' }
+        })
+      );
+
+      const result = await service.create(userWithGroups);
+
+      expect(fetch).toHaveBeenLastCalledWith(`${settings.basePath}/api/users`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+          'Accept': 'application/json',
+          'Authorization': `Bearer ${getAccessToken()}`
+        },
+        body: JSON.stringify(userWithGroups)
+      });
+      expect(result).toEqual(responseData);
+      expect(sanitizeUser).toHaveBeenCalledWith(userWithGroups.user);
+    });
+  });
+
+  describe('when editing a user', () => {
+    it(`should:
+        - PATCH /api/users/:userId
+        - with access token in authorization header
+        - sanitize the user being created
+        - and return the data from response body`, async () => {
+      const user = mockUserWithId();
+      const returnedUser = mockUserWithId({ id: user.id });
+
+      fetch.mockResolvedValueOnce(
+        new Response(JSON.stringify({ data: { user: returnedUser } }), {
+          status: 200,
+          headers: { 'Content-Type': 'application/json' }
+        })
+      );
+
+      const result = await service.edit(user);
+
+      expect(fetch).toHaveBeenLastCalledWith(`${settings.basePath}/api/users/${user.id}`, {
+        method: 'PATCH',
+        headers: {
+          'Content-Type': 'application/json',
+          'Accept': 'application/json',
+          'Authorization': `Bearer ${getAccessToken()}`
+        },
+        body: JSON.stringify({ user })
+      });
+      expect(result).toEqual({ user: returnedUser });
+      expect(sanitizeUser).toHaveBeenCalledWith(user);
+    });
+  });
 });